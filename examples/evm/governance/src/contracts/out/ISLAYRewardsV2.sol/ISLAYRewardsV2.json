{"abi":[{"type":"function","name":"claimRewards","inputs":[{"name":"params","type":"tuple","internalType":"struct ISLAYRewardsV2.ClaimableRewardProof","components":[{"name":"provider","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"recipient","type":"address","internalType":"address"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"},{"name":"proof","type":"bytes32[]","internalType":"bytes32[]"},{"name":"leafIndex","type":"uint32","internalType":"uint32"},{"name":"totalLeaves","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"distributeRewards","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getBalance","inputs":[{"name":"provider","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getClaimedRewards","inputs":[{"name":"provider","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"},{"name":"earner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getDistributionRoots","inputs":[{"name":"provider","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct ISLAYRewardsV2.DistributionRoots","components":[{"name":"prevRoot","type":"bytes32","internalType":"bytes32"},{"name":"currentRoot","type":"bytes32","internalType":"bytes32"}]}],"stateMutability":"view"},{"type":"event","name":"RewardsClaimed","inputs":[{"name":"provider","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"earner","type":"address","indexed":true,"internalType":"address"},{"name":"recipient","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"RewardsDistributed","inputs":[{"name":"provider","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"error","name":"AmountAlreadyClaimed","inputs":[{"name":"provider","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"},{"name":"earner","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"InsufficientBalance","inputs":[{"name":"provider","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"}]},{"type":"error","name":"InvalidMerkleProof","inputs":[]},{"type":"error","name":"InvalidMerkleRoot","inputs":[{"name":"provider","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"},{"name":"merkleRoot","type":"bytes32","internalType":"bytes32"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claimRewards((address,address,uint256,address,bytes32,bytes32[],uint32,uint32))":"6fdaf166","distributeRewards(address,uint256,bytes32)":"40b3a4bf","getBalance(address,address)":"d4fac45d","getClaimedRewards(address,address,address)":"7733369c","getDistributionRoots(address,address)":"5e04f87e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AmountAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalLeaves\",\"type\":\"uint32\"}],\"internalType\":\"struct ISLAYRewardsV2.ClaimableRewardProof\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earner\",\"type\":\"address\"}],\"name\":\"getClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDistributionRoots\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"prevRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currentRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct ISLAYRewardsV2.DistributionRoots\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SLAYRewardsV2 contract, which handles the distribution and claiming of rewards. In this context, a provider is an actor that distribute rewards (think rewards provider). This can be a service an operator, or any other entity that wants to distribute rewards.\",\"errors\":{\"AmountAlreadyClaimed(address,address,address,uint256)\":[{\"details\":\"Error thrown when an earner attempts to claim an amount that has already been claimed.\"}],\"InsufficientBalance(address,address)\":[{\"details\":\"Error thrown when a provider has insufficient balance for a token to distribute rewards.\"}],\"InvalidMerkleProof()\":[{\"details\":\"Error thrown when an invalid Merkle proof is provided during reward claiming.\"}],\"InvalidMerkleRoot(address,address,bytes32)\":[{\"details\":\"Error thrown when an invalid Merkle root is provided for a provider and token pair.\"}]},\"events\":{\"RewardsClaimed(address,address,address,address,uint256,bytes32)\":{\"params\":{\"amount\":\"The amount of tokens claimed.\",\"earner\":\"The address of the earner claiming rewards.\",\"merkleRoot\":\"The Merkle root of the distribution from which the claim is made.\",\"provider\":\"The address of the provider from which rewards are claimed.\",\"recipient\":\"The address receiving the claimed rewards.\",\"token\":\"The address of the token being claimed.\"}},\"RewardsDistributed(address,address,uint256,bytes32)\":{\"params\":{\"amount\":\"The total amount of tokens distributed.\",\"merkleRoot\":\"The Merkle root of the distribution.\",\"provider\":\"The address of the provider (service or operator) distributing rewards.\",\"token\":\"The address of the token being distributed.\"}}},\"kind\":\"dev\",\"methods\":{\"claimRewards((address,address,uint256,address,bytes32,bytes32[],uint32,uint32))\":{\"details\":\"The function checks the Merkle proof, updates the claimed rewards and send the tokens to the recipient.\",\"params\":{\"params\":\"The parameters containing provider, token, amount, recipient, merkleRoot, proof, leafIndex, and totalLeaves.\"}},\"distributeRewards(address,uint256,bytes32)\":{\"details\":\"Service needs to ensure proper allowance is made for the contract to transfer tokens. When the {amount} is 0, the function will essentially only update the Merkle root without any token transfer. This allows for patching of existing distributions.\",\"params\":{\"amount\":\"The amount of tokens to distribute.\",\"merkleRoot\":\"The Merkle root of the distribution.\",\"token\":\"The address of the token to distribute.\"}},\"getBalance(address,address)\":{\"params\":{\"provider\":\"The address of the provider (e.g. service or operator).\",\"token\":\"The address of the token.\"},\"returns\":{\"_0\":\"The balance of the provider for the specified token.\"}},\"getClaimedRewards(address,address,address)\":{\"params\":{\"earner\":\"The address of the earner.\",\"provider\":\"The address of the provider (e.g. service or operator).\",\"token\":\"The address of the token.\"},\"returns\":{\"_0\":\"The total amount of claimed rewards for the specified provider, token, and earner.\"}},\"getDistributionRoots(address,address)\":{\"params\":{\"provider\":\"The address of the provider (e.g. service or operator).\",\"token\":\"The address of the token.\"},\"returns\":{\"_0\":\"DistributionRoots containing the previous and current Merkle roots.\"}}},\"title\":\"Rewards Interface\",\"version\":1},\"userdoc\":{\"events\":{\"RewardsClaimed(address,address,address,address,uint256,bytes32)\":{\"notice\":\"Emitted when rewards are claimed by an earner.\"},\"RewardsDistributed(address,address,uint256,bytes32)\":{\"notice\":\"Emitted when rewards are distributed by provider.\"}},\"kind\":\"user\",\"methods\":{\"claimRewards((address,address,uint256,address,bytes32,bytes32[],uint32,uint32))\":{\"notice\":\"Claims rewards for an earner for a specific provider and token using merkle proof.\"},\"distributeRewards(address,uint256,bytes32)\":{\"notice\":\"Distributes rewards from a provider (service or operator) to earners using a Merkle tree. Although rewards are usually distributed by service or operator, anybody can distribute rewards. This is not limited to the service/operator itself to allow for flexibility in reward distribution.\"},\"getBalance(address,address)\":{\"notice\":\"Returns the balance of a provider for a specific token.\"},\"getClaimedRewards(address,address,address)\":{\"notice\":\"Returns the total claimed rewards for a specific provider, token, and earner.\"},\"getDistributionRoots(address,address)\":{\"notice\":\"Returns the current and previous Merkle roots for a (provider,token) pair.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@satlayer/contracts/src/interface/ISLAYRewardsV2.sol\":\"ISLAYRewardsV2\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@openzeppelin/foundry-upgrades/=node_modules/@openzeppelin/foundry-upgrades/src/\",\":@satlayer/contracts/=node_modules/@satlayer/contracts/src/\",\":forge-std/=node_modules/forge-std/src/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\"]},\"sources\":{\"node_modules/@satlayer/contracts/src/interface/ISLAYRewardsV2.sol\":{\"keccak256\":\"0x89f65258107bb504b36d4bc89511e667813f9f7c21bacff59ee44a84b4e36030\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cd83f14b1331eb43266c3616a6f49a8fff9ae461a1e4d929bc27d1da3974ba11\",\"dweb:/ipfs/QmVXVaqKeAcMgm18NdTyu1KHw6MSyDjhHAowzZQgyKHfzD\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"earner","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"type":"error","name":"AmountAlreadyClaimed"},{"inputs":[{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"token","type":"address"}],"type":"error","name":"InsufficientBalance"},{"inputs":[],"type":"error","name":"InvalidMerkleProof"},{"inputs":[{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"type":"error","name":"InvalidMerkleRoot"},{"inputs":[{"internalType":"address","name":"provider","type":"address","indexed":true},{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"address","name":"earner","type":"address","indexed":true},{"internalType":"address","name":"recipient","type":"address","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":false}],"type":"event","name":"RewardsClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"provider","type":"address","indexed":true},{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":true}],"type":"event","name":"RewardsDistributed","anonymous":false},{"inputs":[{"internalType":"struct ISLAYRewardsV2.ClaimableRewardProof","name":"params","type":"tuple","components":[{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"uint32","name":"leafIndex","type":"uint32"},{"internalType":"uint32","name":"totalLeaves","type":"uint32"}]}],"stateMutability":"nonpayable","type":"function","name":"claimRewards"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"distributeRewards"},{"inputs":[{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"earner","type":"address"}],"stateMutability":"view","type":"function","name":"getClaimedRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"provider","type":"address"},{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getDistributionRoots","outputs":[{"internalType":"struct ISLAYRewardsV2.DistributionRoots","name":"","type":"tuple","components":[{"internalType":"bytes32","name":"prevRoot","type":"bytes32"},{"internalType":"bytes32","name":"currentRoot","type":"bytes32"}]}]}],"devdoc":{"kind":"dev","methods":{"claimRewards((address,address,uint256,address,bytes32,bytes32[],uint32,uint32))":{"details":"The function checks the Merkle proof, updates the claimed rewards and send the tokens to the recipient.","params":{"params":"The parameters containing provider, token, amount, recipient, merkleRoot, proof, leafIndex, and totalLeaves."}},"distributeRewards(address,uint256,bytes32)":{"details":"Service needs to ensure proper allowance is made for the contract to transfer tokens. When the {amount} is 0, the function will essentially only update the Merkle root without any token transfer. This allows for patching of existing distributions.","params":{"amount":"The amount of tokens to distribute.","merkleRoot":"The Merkle root of the distribution.","token":"The address of the token to distribute."}},"getBalance(address,address)":{"params":{"provider":"The address of the provider (e.g. service or operator).","token":"The address of the token."},"returns":{"_0":"The balance of the provider for the specified token."}},"getClaimedRewards(address,address,address)":{"params":{"earner":"The address of the earner.","provider":"The address of the provider (e.g. service or operator).","token":"The address of the token."},"returns":{"_0":"The total amount of claimed rewards for the specified provider, token, and earner."}},"getDistributionRoots(address,address)":{"params":{"provider":"The address of the provider (e.g. service or operator).","token":"The address of the token."},"returns":{"_0":"DistributionRoots containing the previous and current Merkle roots."}}},"version":1},"userdoc":{"kind":"user","methods":{"claimRewards((address,address,uint256,address,bytes32,bytes32[],uint32,uint32))":{"notice":"Claims rewards for an earner for a specific provider and token using merkle proof."},"distributeRewards(address,uint256,bytes32)":{"notice":"Distributes rewards from a provider (service or operator) to earners using a Merkle tree. Although rewards are usually distributed by service or operator, anybody can distribute rewards. This is not limited to the service/operator itself to allow for flexibility in reward distribution."},"getBalance(address,address)":{"notice":"Returns the balance of a provider for a specific token."},"getClaimedRewards(address,address,address)":{"notice":"Returns the total claimed rewards for a specific provider, token, and earner."},"getDistributionRoots(address,address)":{"notice":"Returns the current and previous Merkle roots for a (provider,token) pair."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/","@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","@openzeppelin/foundry-upgrades/=node_modules/@openzeppelin/foundry-upgrades/src/","@satlayer/contracts/=node_modules/@satlayer/contracts/src/","forge-std/=node_modules/forge-std/src/","solidity-bytes-utils/=node_modules/solidity-bytes-utils/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@satlayer/contracts/src/interface/ISLAYRewardsV2.sol":"ISLAYRewardsV2"},"evmVersion":"cancun","libraries":{}},"sources":{"node_modules/@satlayer/contracts/src/interface/ISLAYRewardsV2.sol":{"keccak256":"0x89f65258107bb504b36d4bc89511e667813f9f7c21bacff59ee44a84b4e36030","urls":["bzz-raw://cd83f14b1331eb43266c3616a6f49a8fff9ae461a1e4d929bc27d1da3974ba11","dweb:/ipfs/QmVXVaqKeAcMgm18NdTyu1KHw6MSyDjhHAowzZQgyKHfzD"],"license":"BUSL-1.1"}},"version":1},"id":76}