{"abi":[{"type":"function","name":"approveSlashingFor","inputs":[{"name":"service","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deregisterOperatorFromService","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"deregisterServiceFromOperator","inputs":[{"name":"service","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"disableSlashing","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"enableSlashing","inputs":[{"name":"parameter","type":"tuple","internalType":"struct ISLAYRegistryV2.SlashParameter","components":[{"name":"destination","type":"address","internalType":"address"},{"name":"maxMbips","type":"uint24","internalType":"uint24"},{"name":"resolutionWindow","type":"uint32","internalType":"uint32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getActiveOperatorCount","inputs":[{"name":"service","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getActiveServiceCount","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMaxActiveRelationships","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"getMinWithdrawalDelay","inputs":[{"name":"service","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"getRelationshipStatus","inputs":[{"name":"service","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint8","internalType":"enum RelationshipV2.Status"}],"stateMutability":"view"},{"type":"function","name":"getRelationshipStatusAt","inputs":[{"name":"service","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"},{"name":"timestamp","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint8","internalType":"enum RelationshipV2.Status"}],"stateMutability":"view"},{"type":"function","name":"getSlashParameter","inputs":[{"name":"service","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct ISLAYRegistryV2.SlashParameter","components":[{"name":"destination","type":"address","internalType":"address"},{"name":"maxMbips","type":"uint24","internalType":"uint24"},{"name":"resolutionWindow","type":"uint32","internalType":"uint32"}]}],"stateMutability":"view"},{"type":"function","name":"getSlashParameterAt","inputs":[{"name":"service","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"},{"name":"timestamp","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"tuple","internalType":"struct ISLAYRegistryV2.SlashParameter","components":[{"name":"destination","type":"address","internalType":"address"},{"name":"maxMbips","type":"uint24","internalType":"uint24"},{"name":"resolutionWindow","type":"uint32","internalType":"uint32"}]}],"stateMutability":"view"},{"type":"function","name":"getWithdrawalDelay","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"isOperator","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isService","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"registerAsOperator","inputs":[{"name":"uri","type":"string","internalType":"string"},{"name":"name","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerAsService","inputs":[{"name":"uri","type":"string","internalType":"string"},{"name":"name","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerOperatorToService","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerServiceToOperator","inputs":[{"name":"service","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDefaultWithdrawalDelay","inputs":[{"name":"delay","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMaxActiveRelationships","inputs":[{"name":"maxActive","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMinWithdrawalDelay","inputs":[{"name":"delay","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setWithdrawalDelay","inputs":[{"name":"delay","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateMetadata","inputs":[{"name":"uri","type":"string","internalType":"string"},{"name":"name","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"DefaultWithdrawalDelayUpdated","inputs":[{"name":"oldDelay","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"newDelay","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"MaxActiveRelationshipsUpdated","inputs":[{"name":"oldMaxActive","type":"uint8","indexed":false,"internalType":"uint8"},{"name":"maxActive","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"MetadataUpdated","inputs":[{"name":"provider","type":"address","indexed":true,"internalType":"address"},{"name":"uri","type":"string","indexed":false,"internalType":"string"},{"name":"name","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"MinWithdrawalDelayUpdated","inputs":[{"name":"service","type":"address","indexed":true,"internalType":"address"},{"name":"delay","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"OperatorRegistered","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RelationshipUpdated","inputs":[{"name":"service","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"status","type":"uint8","indexed":false,"internalType":"enum RelationshipV2.Status"},{"name":"slashParameterId","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"ServiceRegistered","inputs":[{"name":"service","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SlashParameterUpdated","inputs":[{"name":"service","type":"address","indexed":true,"internalType":"address"},{"name":"destination","type":"address","indexed":false,"internalType":"address"},{"name":"maxMbips","type":"uint24","indexed":false,"internalType":"uint24"},{"name":"resolutionWindow","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"event","name":"WithdrawalDelayUpdated","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"delay","type":"uint32","indexed":false,"internalType":"uint32"}],"anonymous":false},{"type":"error","name":"OperatorNotFound","inputs":[{"name":"account","type":"address","internalType":"address"}]},{"type":"error","name":"OperatorRelationshipsExceeded","inputs":[]},{"type":"error","name":"ServiceNotFound","inputs":[{"name":"account","type":"address","internalType":"address"}]},{"type":"error","name":"ServiceRelationshipsExceeded","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"approveSlashingFor(address)":"7218c6a7","deregisterOperatorFromService(address)":"8e61af12","deregisterServiceFromOperator(address)":"dcef4403","disableSlashing()":"832025f9","enableSlashing((address,uint24,uint32))":"0793ae7b","getActiveOperatorCount(address)":"ab06f67e","getActiveServiceCount(address)":"be732721","getMaxActiveRelationships()":"c0041712","getMinWithdrawalDelay(address)":"d2cad271","getRelationshipStatus(address,address)":"621e0299","getRelationshipStatusAt(address,address,uint32)":"b1ad5743","getSlashParameter(address)":"48694118","getSlashParameterAt(address,address,uint32)":"97c459c4","getWithdrawalDelay(address)":"b1e50829","isOperator(address)":"6d70f7ae","isService(address)":"e9d8dbfd","registerAsOperator(string,string)":"891a081f","registerAsService(string,string)":"d12a833c","registerOperatorToService(address)":"bcac0a02","registerServiceToOperator(address)":"ca41e40c","setDefaultWithdrawalDelay(uint32)":"dcc4605c","setMaxActiveRelationships(uint8)":"f24e651c","setMinWithdrawalDelay(uint32)":"4ad88989","setWithdrawalDelay(uint32)":"58715e3b","updateMetadata(string,string)":"56ce0e6c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorRelationshipsExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ServiceNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ServiceRelationshipsExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldDelay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"DefaultWithdrawalDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldMaxActive\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxActive\",\"type\":\"uint8\"}],\"name\":\"MaxActiveRelationshipsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"MinWithdrawalDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum RelationshipV2.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashParameterId\",\"type\":\"uint32\"}],\"name\":\"RelationshipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"ServiceRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"maxMbips\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"resolutionWindow\",\"type\":\"uint32\"}],\"name\":\"SlashParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"WithdrawalDelayUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"approveSlashingFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"deregisterOperatorFromService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"deregisterServiceFromOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"maxMbips\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"resolutionWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct ISLAYRegistryV2.SlashParameter\",\"name\":\"parameter\",\"type\":\"tuple\"}],\"name\":\"enableSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"getActiveOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getActiveServiceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxActiveRelationships\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"getMinWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getRelationshipStatus\",\"outputs\":[{\"internalType\":\"enum RelationshipV2.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"getRelationshipStatusAt\",\"outputs\":[{\"internalType\":\"enum RelationshipV2.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"getSlashParameter\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"maxMbips\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"resolutionWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct ISLAYRegistryV2.SlashParameter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"getSlashParameterAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"maxMbips\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"resolutionWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct ISLAYRegistryV2.SlashParameter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isService\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerAsOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerAsService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"registerOperatorToService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"registerServiceToOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"setDefaultWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxActive\",\"type\":\"uint8\"}],\"name\":\"setMaxActiveRelationships\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"setMinWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"setWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface defines the contract methods for registering services and operators, managing their relationships, and handling slashing parameters\",\"errors\":{\"OperatorNotFound(address)\":[{\"details\":\"Account is not registered as an operator.\"}],\"OperatorRelationshipsExceeded()\":[{\"details\":\"the operator is already actively registered to max number of services.\"}],\"ServiceNotFound(address)\":[{\"details\":\"Account is not registered as a service.\"}],\"ServiceRelationshipsExceeded()\":[{\"details\":\"the service is already actively registered to max number of operators.\"}]},\"events\":{\"DefaultWithdrawalDelayUpdated(uint32,uint32)\":{\"details\":\"Emitted when the default withdrawal delay is updated.\",\"params\":{\"newDelay\":\"The new default withdrawal delay in seconds.\",\"oldDelay\":\"The previous default withdrawal delay in seconds.\"}},\"MaxActiveRelationshipsUpdated(uint8,uint8)\":{\"details\":\"Emitted when owner updates the maximum number of active relationships for a service and operator.\",\"params\":{\"maxActive\":\"The new maximum number of active relationships.\",\"oldMaxActive\":\"The previous maximum number of active relationships.\"}},\"MetadataUpdated(address,string,string)\":{\"details\":\"Emitted when a service is registered with metadata. Name and URI are not validated or stored on-chain.\",\"params\":{\"name\":\"Name of the provider's project to display in the UI.\",\"provider\":\"The address of the service/operator provider.\",\"uri\":\"URI of the provider's project to display in the UI.\"}},\"MinWithdrawalDelayUpdated(address,uint32)\":{\"details\":\"Emitted when a service updates the minimum withdrawal delay.\",\"params\":{\"delay\":\"The new minimum withdrawal delay in seconds.\",\"service\":\"The address of the service setting the delay.\"}},\"OperatorRegistered(address)\":{\"details\":\"Emitted when a operator is registered.\"},\"RelationshipUpdated(address,address,uint8,uint32)\":{\"details\":\"Emitted when a service-operator relationship is updated.\",\"params\":{\"operator\":\"The address of the operator.\",\"service\":\"The address of the service.\",\"slashParameterId\":\"The ID of the slash parameter if slashing is enabled, otherwise 0.\",\"status\":\"The updated relationship status.\"}},\"ServiceRegistered(address)\":{\"details\":\"Emitted when a service is registered.\"},\"SlashParameterUpdated(address,address,uint24,uint32)\":{\"details\":\"Emitted when {SlashParameter} for a service is updated.\",\"params\":{\"destination\":\"The address at which slash collateral will be moved.\",\"maxMbips\":\"The maximum slashable amount in mbips.\",\"resolutionWindow\":\"An operator's refutable period in seconds in the event of slash.\",\"service\":\"The address of the service\"}},\"WithdrawalDelayUpdated(address,uint32)\":{\"details\":\"Emitted when an operator updates the withdrawal delay.\",\"params\":{\"delay\":\"The new withdrawal delay in seconds.\",\"operator\":\"The address of the operator setting the delay.\"}}},\"kind\":\"dev\",\"methods\":{\"approveSlashingFor(address)\":{\"details\":\"This function allows an operator to enable, disable, or update slashing parameters for a service. Requirements: - The caller must be a registered operator - The service and operator must have an active relationship - To enable slashing: the service must have already enabled slashing via {enableSlashing(SlashParameter)} - To disable slashing: the service must have already disabled slashing via {disableSlashing()} - To update parameters: the service must have registered new slash parameters via {enableSlashing(SlashParameter)} - The function will revert if no update is registered\",\"params\":{\"service\":\"The address of the service for which slashing is being approved\"}},\"deregisterOperatorFromService(address)\":{\"details\":\"Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the operator from the service's active relationships.\",\"params\":{\"operator\":\"Address of the operator to opt out of the relationship\"}},\"deregisterServiceFromOperator(address)\":{\"details\":\"Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the service from the operator's active relationships.\",\"params\":{\"service\":\"Address of the service to opt out of the relationship\"}},\"disableSlashing()\":{\"details\":\"The caller must be a registered service. This function: - Sets the slash parameter ID to 0 (indicating slashing is disabled) - Does not remove existing slash relationships - Prevents new slash relationships from being created when operators call {approveSlashingFor(address)}\"},\"enableSlashing((address,uint24,uint32))\":{\"details\":\"The caller must be a registered service. This sets up the parameters that will be used when slashing is applied to operators who have approved slashing for this service.\",\"params\":{\"parameter\":\"The slash parameters to be set for the service, containing: - `destination`: Address where the slashed collateral will be moved to at the end of the slashing lifecycle - `maxMbips`: Maximum slashable amount in milli-bips (1 milli-bip = 0.00001%, 10,000,000 milli-bips = 100%) - `resolutionWindow`: Time window in seconds during which an operator can refute slash accusations\"}},\"getActiveOperatorCount(address)\":{\"params\":{\"service\":\"The address of the service\"},\"returns\":{\"_0\":\"The number of active operators registered to the service\"}},\"getActiveServiceCount(address)\":{\"params\":{\"operator\":\"The address of the operator\"},\"returns\":{\"_0\":\"The number of active services registered to the operator\"}},\"getMaxActiveRelationships()\":{\"details\":\"Returns the maximum number of active relationships that a service or operator can have\",\"returns\":{\"_0\":\"The maximum number of active relationships allowed\"}},\"getMinWithdrawalDelay(address)\":{\"details\":\"Returns the configured minimum withdrawal delay for the specified service. This is the minimum delay that any operator working with this service must respect.\",\"params\":{\"service\":\"The address of the service\"},\"returns\":{\"_0\":\"The minimum withdrawal delay in seconds\"}},\"getRelationshipStatus(address,address)\":{\"details\":\"Retrieves the status from the latest checkpoint in the relationship history\",\"params\":{\"operator\":\"The address of the operator\",\"service\":\"The address of the service\"},\"returns\":{\"_0\":\"The latest relationship status for the service-operator pair\"}},\"getRelationshipStatusAt(address,address,uint32)\":{\"details\":\"Retrieves the status from the checkpoint history at the specified timestamp\",\"params\":{\"operator\":\"The address of the operator\",\"service\":\"The address of the service\",\"timestamp\":\"The timestamp to check the relationship status at\"},\"returns\":{\"_0\":\"The relationship status at the specified timestamp\"}},\"getSlashParameter(address)\":{\"details\":\"Retrieves the slash parameters that are currently set for the specified service. Reverts if slashing is not enabled for the service.\",\"params\":{\"service\":\"The address of the service\"},\"returns\":{\"_0\":\"The slash parameters for the service\"}},\"getSlashParameterAt(address,address,uint32)\":{\"details\":\"Retrieves the historical slash parameters for a service-operator relationship at the given timestamp. Reverts if slashing was not enabled at that timestamp.\",\"params\":{\"operator\":\"The address of the operator\",\"service\":\"The address of the service\",\"timestamp\":\"The timestamp at which to check the slash parameters\"},\"returns\":{\"_0\":\"The slash parameters that were in effect at the specified timestamp\"}},\"getWithdrawalDelay(address)\":{\"details\":\"Returns the configured withdrawal delay for the specified operator\",\"params\":{\"operator\":\"The address of the operator\"},\"returns\":{\"_0\":\"The withdrawal delay in seconds\"}},\"isOperator(address)\":{\"details\":\"Returns the registration status from the operators mapping\",\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"True if the address is registered as an operator, false otherwise\"}},\"isService(address)\":{\"details\":\"Returns the registration status from the services mapping\",\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"True if the address is registered as a service, false otherwise\"}},\"registerAsOperator(string,string)\":{\"details\":\"URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed. The caller can be both a service and an operator simultaneously. This relationship is not exclusive.\",\"params\":{\"name\":\"Name of the operator's project to display in the UI\",\"uri\":\"URI of the operator's project to display in the UI\"}},\"registerAsService(string,string)\":{\"details\":\"URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed. The caller can be both a service and an operator simultaneously. This relationship is not exclusive.\",\"params\":{\"name\":\"Name of the service's project to display in the UI\",\"uri\":\"URI of the service's project to display in the UI\"}},\"registerOperatorToService(address)\":{\"details\":\"To call this function, the following conditions must be met:  - Service must be registered via {registerAsService}  - Operator must be registered via {registerAsOperator} If the operator has registered this service, the relationship status will be set to `RelationshipV2.Status.Active`. Otherwise, the relationship status will be set to `RelationshipV2.Status.ServiceRegistered`.\",\"params\":{\"operator\":\"Address of the operator to pair with the service\"}},\"registerServiceToOperator(address)\":{\"details\":\"To call this function, the following conditions must be met:  - Service must be registered via {registerAsService}  - Operator must be registered via {registerAsOperator} If the service has registered this operator, the relationship status will be set to `RelationshipV2.Status.Active`. Otherwise, the relationship status will be set to `RelationshipV2.Status.OperatorRegistered`.\",\"params\":{\"service\":\"Address of the service to pair with the operator\"}},\"setDefaultWithdrawalDelay(uint32)\":{\"details\":\"This function can only be called by the contract owner. The new default delay is only applied to new operators and operators updating their withdrawal delay.\",\"params\":{\"delay\":\"The new default withdrawal delay in seconds\"}},\"setMaxActiveRelationships(uint8)\":{\"details\":\"Only the contract owner can call this function. The new maximum must be greater than zero and greater than the current maximum.\",\"params\":{\"maxActive\":\"The new maximum number of active relationships\"}},\"setMinWithdrawalDelay(uint32)\":{\"details\":\"This function can only be called by the service. All of the service's active operators must have a withdrawal delay greater than or equal to this value, otherwise the function will revert. The delay must be greater than zero.\",\"params\":{\"delay\":\"The new minimum withdrawal delay in seconds\"}},\"setWithdrawalDelay(uint32)\":{\"details\":\"Only the operator can set this value. The delay must be at least equal to the DEFAULT_WITHDRAWAL_DELAY (7 days) and must be greater than or equal to any active service's minimum withdrawal delay.\",\"params\":{\"delay\":\"The delay in seconds before a withdrawal can be processed\"}},\"updateMetadata(string,string)\":{\"details\":\"This function can be called by both services and operators. Emits a `MetadataUpdated` event with the new URI and name. Name and URI are not validated or stored on-chain. Non-compliant uri or name will not affect the REGISTRY, given its offchain uses.\",\"params\":{\"name\":\"Name of the provider's project to display in the UI\",\"uri\":\"URI of the provider's project to display in the UI\"}}},\"title\":\"SLAY Registry Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveSlashingFor(address)\":{\"notice\":\"Approves slashing parameters for a service the operator is validating\"},\"deregisterOperatorFromService(address)\":{\"notice\":\"Deregisters an operator from a service (the caller is the service)\"},\"deregisterServiceFromOperator(address)\":{\"notice\":\"Deregisters a service from an operator (the caller is the operator)\"},\"disableSlashing()\":{\"notice\":\"Disables slashing for a service\"},\"enableSlashing((address,uint24,uint32))\":{\"notice\":\"Enables slashing for a service by providing slash parameters\"},\"getActiveOperatorCount(address)\":{\"notice\":\"Gets the number of active operators registered to a service\"},\"getActiveServiceCount(address)\":{\"notice\":\"Gets the number of active services registered to an operator\"},\"getMaxActiveRelationships()\":{\"notice\":\"Gets the current maximum number of active relationships allowed\"},\"getMinWithdrawalDelay(address)\":{\"notice\":\"Gets the minimum withdrawal delay for a service\"},\"getRelationshipStatus(address,address)\":{\"notice\":\"Gets the current relationship status for a given service-operator pair\"},\"getRelationshipStatusAt(address,address,uint32)\":{\"notice\":\"Gets the relationship status for a given service-operator pair at a specific timestamp\"},\"getSlashParameter(address)\":{\"notice\":\"Gets the current slash parameters for a given service\"},\"getSlashParameterAt(address,address,uint32)\":{\"notice\":\"Gets the slash parameters that an operator had approved at a specific timestamp\"},\"getWithdrawalDelay(address)\":{\"notice\":\"Gets the withdrawal delay for an operator's vault\"},\"isOperator(address)\":{\"notice\":\"Checks if an account is registered as an operator\"},\"isService(address)\":{\"notice\":\"Checks if an account is registered as a service\"},\"registerAsOperator(string,string)\":{\"notice\":\"Registers the caller as an operator\"},\"registerAsService(string,string)\":{\"notice\":\"Registers the caller as a service provider\"},\"registerOperatorToService(address)\":{\"notice\":\"Registers an operator to a service (the caller is the service)\"},\"registerServiceToOperator(address)\":{\"notice\":\"Registers a service to an operator (the caller is the operator)\"},\"setDefaultWithdrawalDelay(uint32)\":{\"notice\":\"Sets the default withdrawal delay for operators's vaults\"},\"setMaxActiveRelationships(uint8)\":{\"notice\":\"Sets the maximum number of active relationships allowed for services and operators\"},\"setMinWithdrawalDelay(uint32)\":{\"notice\":\"Sets the minimum withdrawal delay for a service\"},\"setWithdrawalDelay(uint32)\":{\"notice\":\"Sets the withdrawal delay for an operator's vault\"},\"updateMetadata(string,string)\":{\"notice\":\"Updates metadata for the service or operator\"}},\"notice\":\"Interface for the registry that manages services and operators in the SatLayer ecosystem\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol\":\"ISLAYRegistryV2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@openzeppelin/foundry-upgrades/=node_modules/@openzeppelin/foundry-upgrades/src/\",\":@satlayer/contracts/=node_modules/@satlayer/contracts/src/\",\":forge-std/=lib/forge-std/src/\",\":solidity-bytes-utils/=node_modules/solidity-bytes-utils/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"node_modules/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"node_modules/@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0xe32a5a466492f6a3b871d705d045fc2f8d6e6c8bf69288011531ff875003993f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61c69a907ca80a9cff4bdf30f64d5ee458a6c54f0a87ed7e4c2a1b9275256851\",\"dweb:/ipfs/QmVmhbvE7w5Hs9tj9NBPLk6yAirrEhaRYgTRT9USat4H9a\"]},\"node_modules/@satlayer/contracts/src/RelationshipV2.sol\":{\"keccak256\":\"0x210f913654045fcfd90ea6d1ed7f7f95c9f83fad51dc8f3f0a736e80c6b95309\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a4631e9a850ebafd2ecadacd1faa0a3c03f410e59bdc8d9d819ea4a9f29fa706\",\"dweb:/ipfs/QmcAEpxU4sNj9rdBa75i2vU5JdNemLfcZvcqWskFcUnTG9\"]},\"node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol\":{\"keccak256\":\"0x40f0756add65b88155fdd760715aeb4d374cbeff02c3c5fd1ce80d38773a66e8\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://781ae157186b012decdb62ba03e577e72bf73d2783bfb53715432fee90f576d4\",\"dweb:/ipfs/QmRkApcjqnQdmoa8GF4WMMFGxXdAB6itHHrZZVz9fNiZP3\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.22+commit.4fc1097e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"type":"error","name":"OperatorNotFound"},{"inputs":[],"type":"error","name":"OperatorRelationshipsExceeded"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"type":"error","name":"ServiceNotFound"},{"inputs":[],"type":"error","name":"ServiceRelationshipsExceeded"},{"inputs":[{"internalType":"uint32","name":"oldDelay","type":"uint32","indexed":false},{"internalType":"uint32","name":"newDelay","type":"uint32","indexed":false}],"type":"event","name":"DefaultWithdrawalDelayUpdated","anonymous":false},{"inputs":[{"internalType":"uint8","name":"oldMaxActive","type":"uint8","indexed":false},{"internalType":"uint8","name":"maxActive","type":"uint8","indexed":false}],"type":"event","name":"MaxActiveRelationshipsUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"provider","type":"address","indexed":true},{"internalType":"string","name":"uri","type":"string","indexed":false},{"internalType":"string","name":"name","type":"string","indexed":false}],"type":"event","name":"MetadataUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"service","type":"address","indexed":true},{"internalType":"uint32","name":"delay","type":"uint32","indexed":false}],"type":"event","name":"MinWithdrawalDelayUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true}],"type":"event","name":"OperatorRegistered","anonymous":false},{"inputs":[{"internalType":"address","name":"service","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"enum RelationshipV2.Status","name":"status","type":"uint8","indexed":false},{"internalType":"uint32","name":"slashParameterId","type":"uint32","indexed":false}],"type":"event","name":"RelationshipUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"service","type":"address","indexed":true}],"type":"event","name":"ServiceRegistered","anonymous":false},{"inputs":[{"internalType":"address","name":"service","type":"address","indexed":true},{"internalType":"address","name":"destination","type":"address","indexed":false},{"internalType":"uint24","name":"maxMbips","type":"uint24","indexed":false},{"internalType":"uint32","name":"resolutionWindow","type":"uint32","indexed":false}],"type":"event","name":"SlashParameterUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"uint32","name":"delay","type":"uint32","indexed":false}],"type":"event","name":"WithdrawalDelayUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"service","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"approveSlashingFor"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"deregisterOperatorFromService"},{"inputs":[{"internalType":"address","name":"service","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"deregisterServiceFromOperator"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"disableSlashing"},{"inputs":[{"internalType":"struct ISLAYRegistryV2.SlashParameter","name":"parameter","type":"tuple","components":[{"internalType":"address","name":"destination","type":"address"},{"internalType":"uint24","name":"maxMbips","type":"uint24"},{"internalType":"uint32","name":"resolutionWindow","type":"uint32"}]}],"stateMutability":"nonpayable","type":"function","name":"enableSlashing"},{"inputs":[{"internalType":"address","name":"service","type":"address"}],"stateMutability":"view","type":"function","name":"getActiveOperatorCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"getActiveServiceCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMaxActiveRelationships","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[{"internalType":"address","name":"service","type":"address"}],"stateMutability":"view","type":"function","name":"getMinWithdrawalDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"address","name":"service","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"getRelationshipStatus","outputs":[{"internalType":"enum RelationshipV2.Status","name":"","type":"uint8"}]},{"inputs":[{"internalType":"address","name":"service","type":"address"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint32","name":"timestamp","type":"uint32"}],"stateMutability":"view","type":"function","name":"getRelationshipStatusAt","outputs":[{"internalType":"enum RelationshipV2.Status","name":"","type":"uint8"}]},{"inputs":[{"internalType":"address","name":"service","type":"address"}],"stateMutability":"view","type":"function","name":"getSlashParameter","outputs":[{"internalType":"struct ISLAYRegistryV2.SlashParameter","name":"","type":"tuple","components":[{"internalType":"address","name":"destination","type":"address"},{"internalType":"uint24","name":"maxMbips","type":"uint24"},{"internalType":"uint32","name":"resolutionWindow","type":"uint32"}]}]},{"inputs":[{"internalType":"address","name":"service","type":"address"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint32","name":"timestamp","type":"uint32"}],"stateMutability":"view","type":"function","name":"getSlashParameterAt","outputs":[{"internalType":"struct ISLAYRegistryV2.SlashParameter","name":"","type":"tuple","components":[{"internalType":"address","name":"destination","type":"address"},{"internalType":"uint24","name":"maxMbips","type":"uint24"},{"internalType":"uint32","name":"resolutionWindow","type":"uint32"}]}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"getWithdrawalDelay","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"isOperator","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"isService","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"string","name":"uri","type":"string"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"registerAsOperator"},{"inputs":[{"internalType":"string","name":"uri","type":"string"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"registerAsService"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"registerOperatorToService"},{"inputs":[{"internalType":"address","name":"service","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"registerServiceToOperator"},{"inputs":[{"internalType":"uint32","name":"delay","type":"uint32"}],"stateMutability":"nonpayable","type":"function","name":"setDefaultWithdrawalDelay"},{"inputs":[{"internalType":"uint8","name":"maxActive","type":"uint8"}],"stateMutability":"nonpayable","type":"function","name":"setMaxActiveRelationships"},{"inputs":[{"internalType":"uint32","name":"delay","type":"uint32"}],"stateMutability":"nonpayable","type":"function","name":"setMinWithdrawalDelay"},{"inputs":[{"internalType":"uint32","name":"delay","type":"uint32"}],"stateMutability":"nonpayable","type":"function","name":"setWithdrawalDelay"},{"inputs":[{"internalType":"string","name":"uri","type":"string"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"updateMetadata"}],"devdoc":{"kind":"dev","methods":{"approveSlashingFor(address)":{"details":"This function allows an operator to enable, disable, or update slashing parameters for a service. Requirements: - The caller must be a registered operator - The service and operator must have an active relationship - To enable slashing: the service must have already enabled slashing via {enableSlashing(SlashParameter)} - To disable slashing: the service must have already disabled slashing via {disableSlashing()} - To update parameters: the service must have registered new slash parameters via {enableSlashing(SlashParameter)} - The function will revert if no update is registered","params":{"service":"The address of the service for which slashing is being approved"}},"deregisterOperatorFromService(address)":{"details":"Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the operator from the service's active relationships.","params":{"operator":"Address of the operator to opt out of the relationship"}},"deregisterServiceFromOperator(address)":{"details":"Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the service from the operator's active relationships.","params":{"service":"Address of the service to opt out of the relationship"}},"disableSlashing()":{"details":"The caller must be a registered service. This function: - Sets the slash parameter ID to 0 (indicating slashing is disabled) - Does not remove existing slash relationships - Prevents new slash relationships from being created when operators call {approveSlashingFor(address)}"},"enableSlashing((address,uint24,uint32))":{"details":"The caller must be a registered service. This sets up the parameters that will be used when slashing is applied to operators who have approved slashing for this service.","params":{"parameter":"The slash parameters to be set for the service, containing: - `destination`: Address where the slashed collateral will be moved to at the end of the slashing lifecycle - `maxMbips`: Maximum slashable amount in milli-bips (1 milli-bip = 0.00001%, 10,000,000 milli-bips = 100%) - `resolutionWindow`: Time window in seconds during which an operator can refute slash accusations"}},"getActiveOperatorCount(address)":{"params":{"service":"The address of the service"},"returns":{"_0":"The number of active operators registered to the service"}},"getActiveServiceCount(address)":{"params":{"operator":"The address of the operator"},"returns":{"_0":"The number of active services registered to the operator"}},"getMaxActiveRelationships()":{"details":"Returns the maximum number of active relationships that a service or operator can have","returns":{"_0":"The maximum number of active relationships allowed"}},"getMinWithdrawalDelay(address)":{"details":"Returns the configured minimum withdrawal delay for the specified service. This is the minimum delay that any operator working with this service must respect.","params":{"service":"The address of the service"},"returns":{"_0":"The minimum withdrawal delay in seconds"}},"getRelationshipStatus(address,address)":{"details":"Retrieves the status from the latest checkpoint in the relationship history","params":{"operator":"The address of the operator","service":"The address of the service"},"returns":{"_0":"The latest relationship status for the service-operator pair"}},"getRelationshipStatusAt(address,address,uint32)":{"details":"Retrieves the status from the checkpoint history at the specified timestamp","params":{"operator":"The address of the operator","service":"The address of the service","timestamp":"The timestamp to check the relationship status at"},"returns":{"_0":"The relationship status at the specified timestamp"}},"getSlashParameter(address)":{"details":"Retrieves the slash parameters that are currently set for the specified service. Reverts if slashing is not enabled for the service.","params":{"service":"The address of the service"},"returns":{"_0":"The slash parameters for the service"}},"getSlashParameterAt(address,address,uint32)":{"details":"Retrieves the historical slash parameters for a service-operator relationship at the given timestamp. Reverts if slashing was not enabled at that timestamp.","params":{"operator":"The address of the operator","service":"The address of the service","timestamp":"The timestamp at which to check the slash parameters"},"returns":{"_0":"The slash parameters that were in effect at the specified timestamp"}},"getWithdrawalDelay(address)":{"details":"Returns the configured withdrawal delay for the specified operator","params":{"operator":"The address of the operator"},"returns":{"_0":"The withdrawal delay in seconds"}},"isOperator(address)":{"details":"Returns the registration status from the operators mapping","params":{"account":"The address to check"},"returns":{"_0":"True if the address is registered as an operator, false otherwise"}},"isService(address)":{"details":"Returns the registration status from the services mapping","params":{"account":"The address to check"},"returns":{"_0":"True if the address is registered as a service, false otherwise"}},"registerAsOperator(string,string)":{"details":"URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed. The caller can be both a service and an operator simultaneously. This relationship is not exclusive.","params":{"name":"Name of the operator's project to display in the UI","uri":"URI of the operator's project to display in the UI"}},"registerAsService(string,string)":{"details":"URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed. The caller can be both a service and an operator simultaneously. This relationship is not exclusive.","params":{"name":"Name of the service's project to display in the UI","uri":"URI of the service's project to display in the UI"}},"registerOperatorToService(address)":{"details":"To call this function, the following conditions must be met:  - Service must be registered via {registerAsService}  - Operator must be registered via {registerAsOperator} If the operator has registered this service, the relationship status will be set to `RelationshipV2.Status.Active`. Otherwise, the relationship status will be set to `RelationshipV2.Status.ServiceRegistered`.","params":{"operator":"Address of the operator to pair with the service"}},"registerServiceToOperator(address)":{"details":"To call this function, the following conditions must be met:  - Service must be registered via {registerAsService}  - Operator must be registered via {registerAsOperator} If the service has registered this operator, the relationship status will be set to `RelationshipV2.Status.Active`. Otherwise, the relationship status will be set to `RelationshipV2.Status.OperatorRegistered`.","params":{"service":"Address of the service to pair with the operator"}},"setDefaultWithdrawalDelay(uint32)":{"details":"This function can only be called by the contract owner. The new default delay is only applied to new operators and operators updating their withdrawal delay.","params":{"delay":"The new default withdrawal delay in seconds"}},"setMaxActiveRelationships(uint8)":{"details":"Only the contract owner can call this function. The new maximum must be greater than zero and greater than the current maximum.","params":{"maxActive":"The new maximum number of active relationships"}},"setMinWithdrawalDelay(uint32)":{"details":"This function can only be called by the service. All of the service's active operators must have a withdrawal delay greater than or equal to this value, otherwise the function will revert. The delay must be greater than zero.","params":{"delay":"The new minimum withdrawal delay in seconds"}},"setWithdrawalDelay(uint32)":{"details":"Only the operator can set this value. The delay must be at least equal to the DEFAULT_WITHDRAWAL_DELAY (7 days) and must be greater than or equal to any active service's minimum withdrawal delay.","params":{"delay":"The delay in seconds before a withdrawal can be processed"}},"updateMetadata(string,string)":{"details":"This function can be called by both services and operators. Emits a `MetadataUpdated` event with the new URI and name. Name and URI are not validated or stored on-chain. Non-compliant uri or name will not affect the REGISTRY, given its offchain uses.","params":{"name":"Name of the provider's project to display in the UI","uri":"URI of the provider's project to display in the UI"}}},"version":1},"userdoc":{"kind":"user","methods":{"approveSlashingFor(address)":{"notice":"Approves slashing parameters for a service the operator is validating"},"deregisterOperatorFromService(address)":{"notice":"Deregisters an operator from a service (the caller is the service)"},"deregisterServiceFromOperator(address)":{"notice":"Deregisters a service from an operator (the caller is the operator)"},"disableSlashing()":{"notice":"Disables slashing for a service"},"enableSlashing((address,uint24,uint32))":{"notice":"Enables slashing for a service by providing slash parameters"},"getActiveOperatorCount(address)":{"notice":"Gets the number of active operators registered to a service"},"getActiveServiceCount(address)":{"notice":"Gets the number of active services registered to an operator"},"getMaxActiveRelationships()":{"notice":"Gets the current maximum number of active relationships allowed"},"getMinWithdrawalDelay(address)":{"notice":"Gets the minimum withdrawal delay for a service"},"getRelationshipStatus(address,address)":{"notice":"Gets the current relationship status for a given service-operator pair"},"getRelationshipStatusAt(address,address,uint32)":{"notice":"Gets the relationship status for a given service-operator pair at a specific timestamp"},"getSlashParameter(address)":{"notice":"Gets the current slash parameters for a given service"},"getSlashParameterAt(address,address,uint32)":{"notice":"Gets the slash parameters that an operator had approved at a specific timestamp"},"getWithdrawalDelay(address)":{"notice":"Gets the withdrawal delay for an operator's vault"},"isOperator(address)":{"notice":"Checks if an account is registered as an operator"},"isService(address)":{"notice":"Checks if an account is registered as a service"},"registerAsOperator(string,string)":{"notice":"Registers the caller as an operator"},"registerAsService(string,string)":{"notice":"Registers the caller as a service provider"},"registerOperatorToService(address)":{"notice":"Registers an operator to a service (the caller is the service)"},"registerServiceToOperator(address)":{"notice":"Registers a service to an operator (the caller is the operator)"},"setDefaultWithdrawalDelay(uint32)":{"notice":"Sets the default withdrawal delay for operators's vaults"},"setMaxActiveRelationships(uint8)":{"notice":"Sets the maximum number of active relationships allowed for services and operators"},"setMinWithdrawalDelay(uint32)":{"notice":"Sets the minimum withdrawal delay for a service"},"setWithdrawalDelay(uint32)":{"notice":"Sets the withdrawal delay for an operator's vault"},"updateMetadata(string,string)":{"notice":"Updates metadata for the service or operator"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/","@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","@openzeppelin/foundry-upgrades/=node_modules/@openzeppelin/foundry-upgrades/src/","@satlayer/contracts/=node_modules/@satlayer/contracts/src/","forge-std/=lib/forge-std/src/","solidity-bytes-utils/=node_modules/solidity-bytes-utils/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol":"ISLAYRegistryV2"},"evmVersion":"shanghai","libraries":{}},"sources":{"node_modules/@openzeppelin/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"],"license":"MIT"},"node_modules/@openzeppelin/contracts/utils/math/Math.sol":{"keccak256":"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6","urls":["bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3","dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"],"license":"MIT"},"node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"],"license":"MIT"},"node_modules/@openzeppelin/contracts/utils/structs/Checkpoints.sol":{"keccak256":"0xe32a5a466492f6a3b871d705d045fc2f8d6e6c8bf69288011531ff875003993f","urls":["bzz-raw://61c69a907ca80a9cff4bdf30f64d5ee458a6c54f0a87ed7e4c2a1b9275256851","dweb:/ipfs/QmVmhbvE7w5Hs9tj9NBPLk6yAirrEhaRYgTRT9USat4H9a"],"license":"MIT"},"node_modules/@satlayer/contracts/src/RelationshipV2.sol":{"keccak256":"0x210f913654045fcfd90ea6d1ed7f7f95c9f83fad51dc8f3f0a736e80c6b95309","urls":["bzz-raw://a4631e9a850ebafd2ecadacd1faa0a3c03f410e59bdc8d9d819ea4a9f29fa706","dweb:/ipfs/QmcAEpxU4sNj9rdBa75i2vU5JdNemLfcZvcqWskFcUnTG9"],"license":"BUSL-1.1"},"node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol":{"keccak256":"0x40f0756add65b88155fdd760715aeb4d374cbeff02c3c5fd1ce80d38773a66e8","urls":["bzz-raw://781ae157186b012decdb62ba03e577e72bf73d2783bfb53715432fee90f576d4","dweb:/ipfs/QmRkApcjqnQdmoa8GF4WMMFGxXdAB6itHHrZZVz9fNiZP3"],"license":"BUSL-1.1"}},"version":1},"id":94}