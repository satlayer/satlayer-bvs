{
  "abi": [
    {
      "type": "function",
      "name": "approveSlashingFor",
      "inputs": [{ "name": "service", "type": "address", "internalType": "address" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "deregisterOperatorFromService",
      "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "deregisterServiceFromOperator",
      "inputs": [{ "name": "service", "type": "address", "internalType": "address" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    { "type": "function", "name": "disableSlashing", "inputs": [], "outputs": [], "stateMutability": "nonpayable" },
    {
      "type": "function",
      "name": "enableSlashing",
      "inputs": [
        {
          "name": "parameter",
          "type": "tuple",
          "internalType": "struct ISLAYRegistryV2.SlashParameter",
          "components": [
            { "name": "destination", "type": "address", "internalType": "address" },
            { "name": "maxMbips", "type": "uint24", "internalType": "uint24" },
            { "name": "resolutionWindow", "type": "uint32", "internalType": "uint32" }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getActiveOperatorCount",
      "inputs": [{ "name": "service", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getActiveServiceCount",
      "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMaxActiveRelationshipsForOperator",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint8", "internalType": "uint8" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMaxActiveRelationshipsForService",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint8", "internalType": "uint8" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getMinWithdrawalDelay",
      "inputs": [{ "name": "service", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "", "type": "uint32", "internalType": "uint32" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRelationshipStatus",
      "inputs": [
        { "name": "service", "type": "address", "internalType": "address" },
        { "name": "operator", "type": "address", "internalType": "address" }
      ],
      "outputs": [{ "name": "", "type": "uint8", "internalType": "enum RelationshipV2.Status" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getRelationshipStatusAt",
      "inputs": [
        { "name": "service", "type": "address", "internalType": "address" },
        { "name": "operator", "type": "address", "internalType": "address" },
        { "name": "timestamp", "type": "uint32", "internalType": "uint32" }
      ],
      "outputs": [{ "name": "", "type": "uint8", "internalType": "enum RelationshipV2.Status" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSlashParameter",
      "inputs": [{ "name": "service", "type": "address", "internalType": "address" }],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ISLAYRegistryV2.SlashParameter",
          "components": [
            { "name": "destination", "type": "address", "internalType": "address" },
            { "name": "maxMbips", "type": "uint24", "internalType": "uint24" },
            { "name": "resolutionWindow", "type": "uint32", "internalType": "uint32" }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getSlashParameterAt",
      "inputs": [
        { "name": "service", "type": "address", "internalType": "address" },
        { "name": "operator", "type": "address", "internalType": "address" },
        { "name": "timestamp", "type": "uint32", "internalType": "uint32" }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct ISLAYRegistryV2.SlashParameter",
          "components": [
            { "name": "destination", "type": "address", "internalType": "address" },
            { "name": "maxMbips", "type": "uint24", "internalType": "uint24" },
            { "name": "resolutionWindow", "type": "uint32", "internalType": "uint32" }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getWithdrawalDelay",
      "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "", "type": "uint32", "internalType": "uint32" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isOperator",
      "inputs": [{ "name": "account", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isService",
      "inputs": [{ "name": "account", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "registerAsOperator",
      "inputs": [
        { "name": "uri", "type": "string", "internalType": "string" },
        { "name": "name", "type": "string", "internalType": "string" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "registerAsService",
      "inputs": [
        { "name": "uri", "type": "string", "internalType": "string" },
        { "name": "name", "type": "string", "internalType": "string" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "registerOperatorToService",
      "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "registerServiceToOperator",
      "inputs": [{ "name": "service", "type": "address", "internalType": "address" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setDefaultWithdrawalDelay",
      "inputs": [{ "name": "delay", "type": "uint32", "internalType": "uint32" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMaxActiveRelationshipsForOperator",
      "inputs": [{ "name": "maxActive", "type": "uint8", "internalType": "uint8" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMaxActiveRelationshipsForService",
      "inputs": [{ "name": "maxActive", "type": "uint8", "internalType": "uint8" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setMinWithdrawalDelay",
      "inputs": [{ "name": "delay", "type": "uint32", "internalType": "uint32" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setWithdrawalDelay",
      "inputs": [{ "name": "delay", "type": "uint32", "internalType": "uint32" }],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "updateMetadata",
      "inputs": [
        { "name": "uri", "type": "string", "internalType": "string" },
        { "name": "name", "type": "string", "internalType": "string" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "DefaultWithdrawalDelayUpdated",
      "inputs": [
        { "name": "oldDelay", "type": "uint32", "indexed": false, "internalType": "uint32" },
        { "name": "newDelay", "type": "uint32", "indexed": false, "internalType": "uint32" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaxActiveRelationshipsForOperatorUpdated",
      "inputs": [
        { "name": "oldMaxActive", "type": "uint8", "indexed": false, "internalType": "uint8" },
        { "name": "maxActive", "type": "uint8", "indexed": false, "internalType": "uint8" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MaxActiveRelationshipsForServiceUpdated",
      "inputs": [
        { "name": "oldMaxActive", "type": "uint8", "indexed": false, "internalType": "uint8" },
        { "name": "maxActive", "type": "uint8", "indexed": false, "internalType": "uint8" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MetadataUpdated",
      "inputs": [
        { "name": "provider", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "uri", "type": "string", "indexed": false, "internalType": "string" },
        { "name": "name", "type": "string", "indexed": false, "internalType": "string" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MinWithdrawalDelayUpdated",
      "inputs": [
        { "name": "service", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "delay", "type": "uint32", "indexed": false, "internalType": "uint32" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OperatorRegistered",
      "inputs": [{ "name": "operator", "type": "address", "indexed": true, "internalType": "address" }],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "RelationshipUpdated",
      "inputs": [
        { "name": "service", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "operator", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "status", "type": "uint8", "indexed": false, "internalType": "enum RelationshipV2.Status" },
        { "name": "slashParameterId", "type": "uint32", "indexed": false, "internalType": "uint32" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ServiceRegistered",
      "inputs": [{ "name": "service", "type": "address", "indexed": true, "internalType": "address" }],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "SlashParameterUpdated",
      "inputs": [
        { "name": "service", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "destination", "type": "address", "indexed": false, "internalType": "address" },
        { "name": "maxMbips", "type": "uint24", "indexed": false, "internalType": "uint24" },
        { "name": "resolutionWindow", "type": "uint32", "indexed": false, "internalType": "uint32" }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "WithdrawalDelayUpdated",
      "inputs": [
        { "name": "operator", "type": "address", "indexed": true, "internalType": "address" },
        { "name": "delay", "type": "uint32", "indexed": false, "internalType": "uint32" }
      ],
      "anonymous": false
    },
    {
      "type": "error",
      "name": "OperatorNotFound",
      "inputs": [{ "name": "account", "type": "address", "internalType": "address" }]
    },
    { "type": "error", "name": "OperatorRelationshipsExceeded", "inputs": [] },
    {
      "type": "error",
      "name": "ServiceNotFound",
      "inputs": [{ "name": "account", "type": "address", "internalType": "address" }]
    },
    { "type": "error", "name": "ServiceRelationshipsExceeded", "inputs": [] },
    {
      "type": "error",
      "name": "WithdrawalDelayIncompatible",
      "inputs": [
        { "name": "service", "type": "address", "internalType": "address" },
        { "name": "operator", "type": "address", "internalType": "address" },
        { "name": "withdrawalDelay", "type": "uint32", "internalType": "uint32" },
        { "name": "minWithdrawalDelay", "type": "uint32", "internalType": "uint32" }
      ]
    }
  ],
  "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "methodIdentifiers": {
    "approveSlashingFor(address)": "7218c6a7",
    "deregisterOperatorFromService(address)": "8e61af12",
    "deregisterServiceFromOperator(address)": "dcef4403",
    "disableSlashing()": "832025f9",
    "enableSlashing((address,uint24,uint32))": "0793ae7b",
    "getActiveOperatorCount(address)": "ab06f67e",
    "getActiveServiceCount(address)": "be732721",
    "getMaxActiveRelationshipsForOperator()": "fd864e5e",
    "getMaxActiveRelationshipsForService()": "d1b9d6e2",
    "getMinWithdrawalDelay(address)": "d2cad271",
    "getRelationshipStatus(address,address)": "621e0299",
    "getRelationshipStatusAt(address,address,uint32)": "b1ad5743",
    "getSlashParameter(address)": "48694118",
    "getSlashParameterAt(address,address,uint32)": "97c459c4",
    "getWithdrawalDelay(address)": "b1e50829",
    "isOperator(address)": "6d70f7ae",
    "isService(address)": "e9d8dbfd",
    "registerAsOperator(string,string)": "891a081f",
    "registerAsService(string,string)": "d12a833c",
    "registerOperatorToService(address)": "bcac0a02",
    "registerServiceToOperator(address)": "ca41e40c",
    "setDefaultWithdrawalDelay(uint32)": "dcc4605c",
    "setMaxActiveRelationshipsForOperator(uint8)": "9e2d5ce8",
    "setMaxActiveRelationshipsForService(uint8)": "81d18842",
    "setMinWithdrawalDelay(uint32)": "4ad88989",
    "setWithdrawalDelay(uint32)": "58715e3b",
    "updateMetadata(string,string)": "56ce0e6c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorRelationshipsExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ServiceNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ServiceRelationshipsExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minWithdrawalDelay\",\"type\":\"uint32\"}],\"name\":\"WithdrawalDelayIncompatible\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldDelay\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newDelay\",\"type\":\"uint32\"}],\"name\":\"DefaultWithdrawalDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldMaxActive\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxActive\",\"type\":\"uint8\"}],\"name\":\"MaxActiveRelationshipsForOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldMaxActive\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxActive\",\"type\":\"uint8\"}],\"name\":\"MaxActiveRelationshipsForServiceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MetadataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"MinWithdrawalDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum RelationshipV2.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashParameterId\",\"type\":\"uint32\"}],\"name\":\"RelationshipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"ServiceRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"maxMbips\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"resolutionWindow\",\"type\":\"uint32\"}],\"name\":\"SlashParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"WithdrawalDelayUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"approveSlashingFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"deregisterOperatorFromService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"deregisterServiceFromOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"maxMbips\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"resolutionWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct ISLAYRegistryV2.SlashParameter\",\"name\":\"parameter\",\"type\":\"tuple\"}],\"name\":\"enableSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"getActiveOperatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getActiveServiceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxActiveRelationshipsForOperator\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxActiveRelationshipsForService\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"getMinWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getRelationshipStatus\",\"outputs\":[{\"internalType\":\"enum RelationshipV2.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"getRelationshipStatusAt\",\"outputs\":[{\"internalType\":\"enum RelationshipV2.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"getSlashParameter\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"maxMbips\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"resolutionWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct ISLAYRegistryV2.SlashParameter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"getSlashParameterAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"maxMbips\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"resolutionWindow\",\"type\":\"uint32\"}],\"internalType\":\"struct ISLAYRegistryV2.SlashParameter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getWithdrawalDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isService\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerAsOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerAsService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"registerOperatorToService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"name\":\"registerServiceToOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"setDefaultWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxActive\",\"type\":\"uint8\"}],\"name\":\"setMaxActiveRelationshipsForOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxActive\",\"type\":\"uint8\"}],\"name\":\"setMaxActiveRelationshipsForService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"setMinWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"setWithdrawalDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface defines the contract methods for registering services and operators, managing their relationships, and handling slashing parameters\",\"errors\":{\"OperatorNotFound(address)\":[{\"details\":\"Account is not registered as an operator.\"}],\"OperatorRelationshipsExceeded()\":[{\"details\":\"the operator is already actively registered to max number of services.\"}],\"ServiceNotFound(address)\":[{\"details\":\"Account is not registered as a service.\"}],\"ServiceRelationshipsExceeded()\":[{\"details\":\"the service is already actively registered to max number of operators.\"}],\"WithdrawalDelayIncompatible(address,address,uint32,uint32)\":[{\"details\":\"thrown when a service and operator withdrawal delay does not match.\"}]},\"events\":{\"DefaultWithdrawalDelayUpdated(uint32,uint32)\":{\"details\":\"Emitted when the default withdrawal delay is updated.\",\"params\":{\"newDelay\":\"The new default withdrawal delay in seconds.\",\"oldDelay\":\"The previous default withdrawal delay in seconds.\"}},\"MaxActiveRelationshipsForOperatorUpdated(uint8,uint8)\":{\"details\":\"Emitted when owner updates the maximum number of active relationships for an operator\",\"params\":{\"maxActive\":\"The new maximum number of active relationships.\",\"oldMaxActive\":\"The previous maximum number of active relationships.\"}},\"MaxActiveRelationshipsForServiceUpdated(uint8,uint8)\":{\"details\":\"Emitted when owner updates the maximum number of active relationships for a service\",\"params\":{\"maxActive\":\"The new maximum number of active relationships.\",\"oldMaxActive\":\"The previous maximum number of active relationships.\"}},\"MetadataUpdated(address,string,string)\":{\"details\":\"Emitted when a service is registered with metadata. Name and URI are not validated or stored on-chain.\",\"params\":{\"name\":\"Name of the provider's project to display in the UI.\",\"provider\":\"The address of the service/operator provider.\",\"uri\":\"URI of the provider's project to display in the UI.\"}},\"MinWithdrawalDelayUpdated(address,uint32)\":{\"details\":\"Emitted when a service updates the minimum withdrawal delay.\",\"params\":{\"delay\":\"The new minimum withdrawal delay in seconds.\",\"service\":\"The address of the service setting the delay.\"}},\"OperatorRegistered(address)\":{\"details\":\"Emitted when a operator is registered.\"},\"RelationshipUpdated(address,address,uint8,uint32)\":{\"details\":\"Emitted when a service-operator relationship is updated.\",\"params\":{\"operator\":\"The address of the operator.\",\"service\":\"The address of the service.\",\"slashParameterId\":\"The ID of the slash parameter if slashing is enabled, otherwise 0.\",\"status\":\"The updated relationship status.\"}},\"ServiceRegistered(address)\":{\"details\":\"Emitted when a service is registered.\"},\"SlashParameterUpdated(address,address,uint24,uint32)\":{\"details\":\"Emitted when {SlashParameter} for a service is updated.\",\"params\":{\"destination\":\"The address at which slash collateral will be moved.\",\"maxMbips\":\"The maximum slashable amount in mbips.\",\"resolutionWindow\":\"An operator's refutable period in seconds in the event of slash.\",\"service\":\"The address of the service\"}},\"WithdrawalDelayUpdated(address,uint32)\":{\"details\":\"Emitted when an operator updates the withdrawal delay.\",\"params\":{\"delay\":\"The new withdrawal delay in seconds.\",\"operator\":\"The address of the operator setting the delay.\"}}},\"kind\":\"dev\",\"methods\":{\"approveSlashingFor(address)\":{\"details\":\"This function allows an operator to enable, disable, or update slashing parameters for a service. Requirements: - The caller must be a registered operator - The service and operator must have an active relationship - To enable slashing: the service must have already enabled slashing via {enableSlashing(SlashParameter)} - To disable slashing: the service must have already disabled slashing via {disableSlashing()} - To update parameters: the service must have registered new slash parameters via {enableSlashing(SlashParameter)} - The function will revert if no update is registered\",\"params\":{\"service\":\"The address of the service for which slashing is being approved\"}},\"deregisterOperatorFromService(address)\":{\"details\":\"Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the operator from the service's active relationships.\",\"params\":{\"operator\":\"Address of the operator to opt out of the relationship\"}},\"deregisterServiceFromOperator(address)\":{\"details\":\"Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the service from the operator's active relationships.\",\"params\":{\"service\":\"Address of the service to opt out of the relationship\"}},\"disableSlashing()\":{\"details\":\"The caller must be a registered service. This function: - Sets the slash parameter ID to 0 (indicating slashing is disabled) - Does not remove existing slash relationships - Prevents new slash relationships from being created when operators call {approveSlashingFor(address)}\"},\"enableSlashing((address,uint24,uint32))\":{\"details\":\"The caller must be a registered service. This sets up the parameters that will be used when slashing is applied to operators who have approved slashing for this service.\",\"params\":{\"parameter\":\"The slash parameters to be set for the service, containing: - `destination`: Address where the slashed collateral will be moved to at the end of the slashing lifecycle - `maxMbips`: Maximum slashable amount in milli-bips (1 milli-bip = 0.00001%, 10,000,000 milli-bips = 100%) - `resolutionWindow`: Time window in seconds during which an operator can refute slash accusations\"}},\"getActiveOperatorCount(address)\":{\"params\":{\"service\":\"The address of the service\"},\"returns\":{\"_0\":\"The number of active operators registered to the service\"}},\"getActiveServiceCount(address)\":{\"params\":{\"operator\":\"The address of the operator\"},\"returns\":{\"_0\":\"The number of active services registered to the operator\"}},\"getMaxActiveRelationshipsForOperator()\":{\"details\":\"Returns the maximum number of active relationships that an operator can have\",\"returns\":{\"_0\":\"The maximum number of active relationships allowed\"}},\"getMaxActiveRelationshipsForService()\":{\"details\":\"Returns the maximum number of active relationships that a service can have\",\"returns\":{\"_0\":\"The maximum number of active relationships allowed\"}},\"getMinWithdrawalDelay(address)\":{\"details\":\"Returns the configured minimum withdrawal delay for the specified service. This is the minimum delay that any operator working with this service must respect.\",\"params\":{\"service\":\"The address of the service\"},\"returns\":{\"_0\":\"The minimum withdrawal delay in seconds\"}},\"getRelationshipStatus(address,address)\":{\"details\":\"Retrieves the status from the latest checkpoint in the relationship history\",\"params\":{\"operator\":\"The address of the operator\",\"service\":\"The address of the service\"},\"returns\":{\"_0\":\"The latest relationship status for the service-operator pair\"}},\"getRelationshipStatusAt(address,address,uint32)\":{\"details\":\"Retrieves the status from the checkpoint history at the specified timestamp\",\"params\":{\"operator\":\"The address of the operator\",\"service\":\"The address of the service\",\"timestamp\":\"The timestamp to check the relationship status at\"},\"returns\":{\"_0\":\"The relationship status at the specified timestamp\"}},\"getSlashParameter(address)\":{\"details\":\"Retrieves the slash parameters that are currently set for the specified service. Reverts if slashing is not enabled for the service.\",\"params\":{\"service\":\"The address of the service\"},\"returns\":{\"_0\":\"The slash parameters for the service\"}},\"getSlashParameterAt(address,address,uint32)\":{\"details\":\"Retrieves the historical slash parameters for a service-operator relationship at the given timestamp. Reverts if slashing was not enabled at that timestamp.\",\"params\":{\"operator\":\"The address of the operator\",\"service\":\"The address of the service\",\"timestamp\":\"The timestamp at which to check the slash parameters\"},\"returns\":{\"_0\":\"The slash parameters that were in effect at the specified timestamp\"}},\"getWithdrawalDelay(address)\":{\"details\":\"Returns the configured withdrawal delay for the specified operator\",\"params\":{\"operator\":\"The address of the operator\"},\"returns\":{\"_0\":\"The withdrawal delay in seconds\"}},\"isOperator(address)\":{\"details\":\"Returns the registration status from the operators mapping\",\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"True if the address is registered as an operator, false otherwise\"}},\"isService(address)\":{\"details\":\"Returns the registration status from the services mapping\",\"params\":{\"account\":\"The address to check\"},\"returns\":{\"_0\":\"True if the address is registered as a service, false otherwise\"}},\"registerAsOperator(string,string)\":{\"details\":\"URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed. The caller can be both a service and an operator simultaneously. This relationship is not exclusive.\",\"params\":{\"name\":\"Name of the operator's project to display in the UI\",\"uri\":\"URI of the operator's project to display in the UI\"}},\"registerAsService(string,string)\":{\"details\":\"URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed. The caller can be both a service and an operator simultaneously. This relationship is not exclusive.\",\"params\":{\"name\":\"Name of the service's project to display in the UI\",\"uri\":\"URI of the service's project to display in the UI\"}},\"registerOperatorToService(address)\":{\"details\":\"To call this function, the following conditions must be met:  - Service must be registered via {registerAsService}  - Operator must be registered via {registerAsOperator} If the operator has registered this service, the relationship status will be set to `RelationshipV2.Status.Active`. Otherwise, the relationship status will be set to `RelationshipV2.Status.ServiceRegistered`.\",\"params\":{\"operator\":\"Address of the operator to pair with the service\"}},\"registerServiceToOperator(address)\":{\"details\":\"To call this function, the following conditions must be met:  - Service must be registered via {registerAsService}  - Operator must be registered via {registerAsOperator} If the service has registered this operator, the relationship status will be set to `RelationshipV2.Status.Active`. Otherwise, the relationship status will be set to `RelationshipV2.Status.OperatorRegistered`.\",\"params\":{\"service\":\"Address of the service to pair with the operator\"}},\"setDefaultWithdrawalDelay(uint32)\":{\"details\":\"This function can only be called by the contract owner. The new default delay is only applied to new operators and operators updating their withdrawal delay.\",\"params\":{\"delay\":\"The new default withdrawal delay in seconds\"}},\"setMaxActiveRelationshipsForOperator(uint8)\":{\"details\":\"Only the contract owner can call this function. The new maximum must be greater than zero and greater than the current maximum.\",\"params\":{\"maxActive\":\"The new maximum number of active relationships\"}},\"setMaxActiveRelationshipsForService(uint8)\":{\"details\":\"Only the contract owner can call this function. The new maximum must be greater than zero and greater than the current maximum.\",\"params\":{\"maxActive\":\"The new maximum number of active relationships\"}},\"setMinWithdrawalDelay(uint32)\":{\"details\":\"This function can only be called by the service. All of the service's active operators must have a withdrawal delay greater than or equal to this value, otherwise the function will revert. The delay must be greater than zero.\",\"params\":{\"delay\":\"The new minimum withdrawal delay in seconds\"}},\"setWithdrawalDelay(uint32)\":{\"details\":\"Only the operator can set this value. The delay must be at least equal to the DEFAULT_WITHDRAWAL_DELAY (7 days) and must be greater than or equal to any active service's minimum withdrawal delay.\",\"params\":{\"delay\":\"The delay in seconds before a withdrawal can be processed\"}},\"updateMetadata(string,string)\":{\"details\":\"This function can be called by both services and operators. Emits a `MetadataUpdated` event with the new URI and name. Name and URI are not validated or stored on-chain. Non-compliant uri or name will not affect the REGISTRY, given its offchain uses.\",\"params\":{\"name\":\"Name of the provider's project to display in the UI\",\"uri\":\"URI of the provider's project to display in the UI\"}}},\"title\":\"SLAY Registry Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveSlashingFor(address)\":{\"notice\":\"Approves slashing parameters for a service the operator is validating\"},\"deregisterOperatorFromService(address)\":{\"notice\":\"Deregisters an operator from a service (the caller is the service)\"},\"deregisterServiceFromOperator(address)\":{\"notice\":\"Deregisters a service from an operator (the caller is the operator)\"},\"disableSlashing()\":{\"notice\":\"Disables slashing for a service\"},\"enableSlashing((address,uint24,uint32))\":{\"notice\":\"Enables slashing for a service by providing slash parameters\"},\"getActiveOperatorCount(address)\":{\"notice\":\"Gets the number of active operators registered to a service\"},\"getActiveServiceCount(address)\":{\"notice\":\"Gets the number of active services registered to an operator\"},\"getMaxActiveRelationshipsForOperator()\":{\"notice\":\"Gets the current maximum number of active relationships allowed\"},\"getMaxActiveRelationshipsForService()\":{\"notice\":\"Gets the current maximum number of active relationships allowed\"},\"getMinWithdrawalDelay(address)\":{\"notice\":\"Gets the minimum withdrawal delay for a service\"},\"getRelationshipStatus(address,address)\":{\"notice\":\"Gets the current relationship status for a given service-operator pair\"},\"getRelationshipStatusAt(address,address,uint32)\":{\"notice\":\"Gets the relationship status for a given service-operator pair at a specific timestamp\"},\"getSlashParameter(address)\":{\"notice\":\"Gets the current slash parameters for a given service\"},\"getSlashParameterAt(address,address,uint32)\":{\"notice\":\"Gets the slash parameters that an operator had approved at a specific timestamp\"},\"getWithdrawalDelay(address)\":{\"notice\":\"Gets the withdrawal delay for an operator's vault\"},\"isOperator(address)\":{\"notice\":\"Checks if an account is registered as an operator\"},\"isService(address)\":{\"notice\":\"Checks if an account is registered as a service\"},\"registerAsOperator(string,string)\":{\"notice\":\"Registers the caller as an operator\"},\"registerAsService(string,string)\":{\"notice\":\"Registers the caller as a service provider\"},\"registerOperatorToService(address)\":{\"notice\":\"Registers an operator to a service (the caller is the service)\"},\"registerServiceToOperator(address)\":{\"notice\":\"Registers a service to an operator (the caller is the operator)\"},\"setDefaultWithdrawalDelay(uint32)\":{\"notice\":\"Sets the default withdrawal delay for operators's vaults\"},\"setMaxActiveRelationshipsForOperator(uint8)\":{\"notice\":\"Sets the maximum number of active relationships allowed for operators\"},\"setMaxActiveRelationshipsForService(uint8)\":{\"notice\":\"Sets the maximum number of active relationships allowed for services\"},\"setMinWithdrawalDelay(uint32)\":{\"notice\":\"Sets the minimum withdrawal delay for a service\"},\"setWithdrawalDelay(uint32)\":{\"notice\":\"Sets the withdrawal delay for an operator's vault\"},\"updateMetadata(string,string)\":{\"notice\":\"Updates metadata for the service or operator\"}},\"notice\":\"Interface for the registry that manages services and operators in the SatLayer ecosystem\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol\":\"ISLAYRegistryV2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@aave/=node_modules/@aave/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@openzeppelin/foundry-upgrades/=node_modules/@openzeppelin/foundry-upgrades/src/\",\":@satlayer/contracts/=node_modules/@satlayer/contracts/\",\":forge-std/=node_modules/forge-std/src/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"node_modules/@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3\",\"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB\"]},\"node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"node_modules/@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0xe32a5a466492f6a3b871d705d045fc2f8d6e6c8bf69288011531ff875003993f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61c69a907ca80a9cff4bdf30f64d5ee458a6c54f0a87ed7e4c2a1b9275256851\",\"dweb:/ipfs/QmVmhbvE7w5Hs9tj9NBPLk6yAirrEhaRYgTRT9USat4H9a\"]},\"node_modules/@satlayer/contracts/src/RelationshipV2.sol\":{\"keccak256\":\"0x476a00c6a985c8b5d44c81b800821ca1fb156e4d527414f5227dd1fa500248e2\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://2aa1058d2c60df65d564b4b453efcdd5e602310fb66eac1e313c0390d8eef763\",\"dweb:/ipfs/QmPyFGVcfeo9dRzHVYPaignPyME2pGDKFoNVhEwaZkk3LT\"]},\"node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol\":{\"keccak256\":\"0x51333ef7c92f3f6d94691ea0f966acd07b12dc32277dd81892f6783b3bab2f5a\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://2a20146f9e3a67e6955877ac774d3d0623c80d76a8dcab49fa791cf2bb5b24d3\",\"dweb:/ipfs/QmfVYvZ8pkHvwZbSzWQNkuy3hYmdF7ZkhAmtC9fC8Lftnd\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.24+commit.e11b9ed9" },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
          "type": "error",
          "name": "OperatorNotFound"
        },
        { "inputs": [], "type": "error", "name": "OperatorRelationshipsExceeded" },
        {
          "inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
          "type": "error",
          "name": "ServiceNotFound"
        },
        { "inputs": [], "type": "error", "name": "ServiceRelationshipsExceeded" },
        {
          "inputs": [
            { "internalType": "address", "name": "service", "type": "address" },
            { "internalType": "address", "name": "operator", "type": "address" },
            { "internalType": "uint32", "name": "withdrawalDelay", "type": "uint32" },
            { "internalType": "uint32", "name": "minWithdrawalDelay", "type": "uint32" }
          ],
          "type": "error",
          "name": "WithdrawalDelayIncompatible"
        },
        {
          "inputs": [
            { "internalType": "uint32", "name": "oldDelay", "type": "uint32", "indexed": false },
            { "internalType": "uint32", "name": "newDelay", "type": "uint32", "indexed": false }
          ],
          "type": "event",
          "name": "DefaultWithdrawalDelayUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "uint8", "name": "oldMaxActive", "type": "uint8", "indexed": false },
            { "internalType": "uint8", "name": "maxActive", "type": "uint8", "indexed": false }
          ],
          "type": "event",
          "name": "MaxActiveRelationshipsForOperatorUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "uint8", "name": "oldMaxActive", "type": "uint8", "indexed": false },
            { "internalType": "uint8", "name": "maxActive", "type": "uint8", "indexed": false }
          ],
          "type": "event",
          "name": "MaxActiveRelationshipsForServiceUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "provider", "type": "address", "indexed": true },
            { "internalType": "string", "name": "uri", "type": "string", "indexed": false },
            { "internalType": "string", "name": "name", "type": "string", "indexed": false }
          ],
          "type": "event",
          "name": "MetadataUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "service", "type": "address", "indexed": true },
            { "internalType": "uint32", "name": "delay", "type": "uint32", "indexed": false }
          ],
          "type": "event",
          "name": "MinWithdrawalDelayUpdated",
          "anonymous": false
        },
        {
          "inputs": [{ "internalType": "address", "name": "operator", "type": "address", "indexed": true }],
          "type": "event",
          "name": "OperatorRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "service", "type": "address", "indexed": true },
            { "internalType": "address", "name": "operator", "type": "address", "indexed": true },
            { "internalType": "enum RelationshipV2.Status", "name": "status", "type": "uint8", "indexed": false },
            { "internalType": "uint32", "name": "slashParameterId", "type": "uint32", "indexed": false }
          ],
          "type": "event",
          "name": "RelationshipUpdated",
          "anonymous": false
        },
        {
          "inputs": [{ "internalType": "address", "name": "service", "type": "address", "indexed": true }],
          "type": "event",
          "name": "ServiceRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "service", "type": "address", "indexed": true },
            { "internalType": "address", "name": "destination", "type": "address", "indexed": false },
            { "internalType": "uint24", "name": "maxMbips", "type": "uint24", "indexed": false },
            { "internalType": "uint32", "name": "resolutionWindow", "type": "uint32", "indexed": false }
          ],
          "type": "event",
          "name": "SlashParameterUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            { "internalType": "address", "name": "operator", "type": "address", "indexed": true },
            { "internalType": "uint32", "name": "delay", "type": "uint32", "indexed": false }
          ],
          "type": "event",
          "name": "WithdrawalDelayUpdated",
          "anonymous": false
        },
        {
          "inputs": [{ "internalType": "address", "name": "service", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approveSlashingFor"
        },
        {
          "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deregisterOperatorFromService"
        },
        {
          "inputs": [{ "internalType": "address", "name": "service", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deregisterServiceFromOperator"
        },
        { "inputs": [], "stateMutability": "nonpayable", "type": "function", "name": "disableSlashing" },
        {
          "inputs": [
            {
              "internalType": "struct ISLAYRegistryV2.SlashParameter",
              "name": "parameter",
              "type": "tuple",
              "components": [
                { "internalType": "address", "name": "destination", "type": "address" },
                { "internalType": "uint24", "name": "maxMbips", "type": "uint24" },
                { "internalType": "uint32", "name": "resolutionWindow", "type": "uint32" }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "enableSlashing"
        },
        {
          "inputs": [{ "internalType": "address", "name": "service", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getActiveOperatorCount",
          "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
        },
        {
          "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getActiveServiceCount",
          "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getMaxActiveRelationshipsForOperator",
          "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getMaxActiveRelationshipsForService",
          "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }]
        },
        {
          "inputs": [{ "internalType": "address", "name": "service", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getMinWithdrawalDelay",
          "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "service", "type": "address" },
            { "internalType": "address", "name": "operator", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRelationshipStatus",
          "outputs": [{ "internalType": "enum RelationshipV2.Status", "name": "", "type": "uint8" }]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "service", "type": "address" },
            { "internalType": "address", "name": "operator", "type": "address" },
            { "internalType": "uint32", "name": "timestamp", "type": "uint32" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRelationshipStatusAt",
          "outputs": [{ "internalType": "enum RelationshipV2.Status", "name": "", "type": "uint8" }]
        },
        {
          "inputs": [{ "internalType": "address", "name": "service", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getSlashParameter",
          "outputs": [
            {
              "internalType": "struct ISLAYRegistryV2.SlashParameter",
              "name": "",
              "type": "tuple",
              "components": [
                { "internalType": "address", "name": "destination", "type": "address" },
                { "internalType": "uint24", "name": "maxMbips", "type": "uint24" },
                { "internalType": "uint32", "name": "resolutionWindow", "type": "uint32" }
              ]
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "service", "type": "address" },
            { "internalType": "address", "name": "operator", "type": "address" },
            { "internalType": "uint32", "name": "timestamp", "type": "uint32" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSlashParameterAt",
          "outputs": [
            {
              "internalType": "struct ISLAYRegistryV2.SlashParameter",
              "name": "",
              "type": "tuple",
              "components": [
                { "internalType": "address", "name": "destination", "type": "address" },
                { "internalType": "uint24", "name": "maxMbips", "type": "uint24" },
                { "internalType": "uint32", "name": "resolutionWindow", "type": "uint32" }
              ]
            }
          ]
        },
        {
          "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "getWithdrawalDelay",
          "outputs": [{ "internalType": "uint32", "name": "", "type": "uint32" }]
        },
        {
          "inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "isOperator",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
          "stateMutability": "view",
          "type": "function",
          "name": "isService",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [
            { "internalType": "string", "name": "uri", "type": "string" },
            { "internalType": "string", "name": "name", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerAsOperator"
        },
        {
          "inputs": [
            { "internalType": "string", "name": "uri", "type": "string" },
            { "internalType": "string", "name": "name", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerAsService"
        },
        {
          "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerOperatorToService"
        },
        {
          "inputs": [{ "internalType": "address", "name": "service", "type": "address" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerServiceToOperator"
        },
        {
          "inputs": [{ "internalType": "uint32", "name": "delay", "type": "uint32" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultWithdrawalDelay"
        },
        {
          "inputs": [{ "internalType": "uint8", "name": "maxActive", "type": "uint8" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMaxActiveRelationshipsForOperator"
        },
        {
          "inputs": [{ "internalType": "uint8", "name": "maxActive", "type": "uint8" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMaxActiveRelationshipsForService"
        },
        {
          "inputs": [{ "internalType": "uint32", "name": "delay", "type": "uint32" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMinWithdrawalDelay"
        },
        {
          "inputs": [{ "internalType": "uint32", "name": "delay", "type": "uint32" }],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setWithdrawalDelay"
        },
        {
          "inputs": [
            { "internalType": "string", "name": "uri", "type": "string" },
            { "internalType": "string", "name": "name", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateMetadata"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approveSlashingFor(address)": {
            "details": "This function allows an operator to enable, disable, or update slashing parameters for a service. Requirements: - The caller must be a registered operator - The service and operator must have an active relationship - To enable slashing: the service must have already enabled slashing via {enableSlashing(SlashParameter)} - To disable slashing: the service must have already disabled slashing via {disableSlashing()} - To update parameters: the service must have registered new slash parameters via {enableSlashing(SlashParameter)} - The function will revert if no update is registered",
            "params": { "service": "The address of the service for which slashing is being approved" }
          },
          "deregisterOperatorFromService(address)": {
            "details": "Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the operator from the service's active relationships.",
            "params": { "operator": "Address of the operator to opt out of the relationship" }
          },
          "deregisterServiceFromOperator(address)": {
            "details": "Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the service from the operator's active relationships.",
            "params": { "service": "Address of the service to opt out of the relationship" }
          },
          "disableSlashing()": {
            "details": "The caller must be a registered service. This function: - Sets the slash parameter ID to 0 (indicating slashing is disabled) - Does not remove existing slash relationships - Prevents new slash relationships from being created when operators call {approveSlashingFor(address)}"
          },
          "enableSlashing((address,uint24,uint32))": {
            "details": "The caller must be a registered service. This sets up the parameters that will be used when slashing is applied to operators who have approved slashing for this service.",
            "params": {
              "parameter": "The slash parameters to be set for the service, containing: - `destination`: Address where the slashed collateral will be moved to at the end of the slashing lifecycle - `maxMbips`: Maximum slashable amount in milli-bips (1 milli-bip = 0.00001%, 10,000,000 milli-bips = 100%) - `resolutionWindow`: Time window in seconds during which an operator can refute slash accusations"
            }
          },
          "getActiveOperatorCount(address)": {
            "params": { "service": "The address of the service" },
            "returns": { "_0": "The number of active operators registered to the service" }
          },
          "getActiveServiceCount(address)": {
            "params": { "operator": "The address of the operator" },
            "returns": { "_0": "The number of active services registered to the operator" }
          },
          "getMaxActiveRelationshipsForOperator()": {
            "details": "Returns the maximum number of active relationships that an operator can have",
            "returns": { "_0": "The maximum number of active relationships allowed" }
          },
          "getMaxActiveRelationshipsForService()": {
            "details": "Returns the maximum number of active relationships that a service can have",
            "returns": { "_0": "The maximum number of active relationships allowed" }
          },
          "getMinWithdrawalDelay(address)": {
            "details": "Returns the configured minimum withdrawal delay for the specified service. This is the minimum delay that any operator working with this service must respect.",
            "params": { "service": "The address of the service" },
            "returns": { "_0": "The minimum withdrawal delay in seconds" }
          },
          "getRelationshipStatus(address,address)": {
            "details": "Retrieves the status from the latest checkpoint in the relationship history",
            "params": { "operator": "The address of the operator", "service": "The address of the service" },
            "returns": { "_0": "The latest relationship status for the service-operator pair" }
          },
          "getRelationshipStatusAt(address,address,uint32)": {
            "details": "Retrieves the status from the checkpoint history at the specified timestamp",
            "params": {
              "operator": "The address of the operator",
              "service": "The address of the service",
              "timestamp": "The timestamp to check the relationship status at"
            },
            "returns": { "_0": "The relationship status at the specified timestamp" }
          },
          "getSlashParameter(address)": {
            "details": "Retrieves the slash parameters that are currently set for the specified service. Reverts if slashing is not enabled for the service.",
            "params": { "service": "The address of the service" },
            "returns": { "_0": "The slash parameters for the service" }
          },
          "getSlashParameterAt(address,address,uint32)": {
            "details": "Retrieves the historical slash parameters for a service-operator relationship at the given timestamp. Reverts if slashing was not enabled at that timestamp.",
            "params": {
              "operator": "The address of the operator",
              "service": "The address of the service",
              "timestamp": "The timestamp at which to check the slash parameters"
            },
            "returns": { "_0": "The slash parameters that were in effect at the specified timestamp" }
          },
          "getWithdrawalDelay(address)": {
            "details": "Returns the configured withdrawal delay for the specified operator",
            "params": { "operator": "The address of the operator" },
            "returns": { "_0": "The withdrawal delay in seconds" }
          },
          "isOperator(address)": {
            "details": "Returns the registration status from the operators mapping",
            "params": { "account": "The address to check" },
            "returns": { "_0": "True if the address is registered as an operator, false otherwise" }
          },
          "isService(address)": {
            "details": "Returns the registration status from the services mapping",
            "params": { "account": "The address to check" },
            "returns": { "_0": "True if the address is registered as a service, false otherwise" }
          },
          "registerAsOperator(string,string)": {
            "details": "URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed. The caller can be both a service and an operator simultaneously. This relationship is not exclusive.",
            "params": {
              "name": "Name of the operator's project to display in the UI",
              "uri": "URI of the operator's project to display in the UI"
            }
          },
          "registerAsService(string,string)": {
            "details": "URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed. The caller can be both a service and an operator simultaneously. This relationship is not exclusive.",
            "params": {
              "name": "Name of the service's project to display in the UI",
              "uri": "URI of the service's project to display in the UI"
            }
          },
          "registerOperatorToService(address)": {
            "details": "To call this function, the following conditions must be met:  - Service must be registered via {registerAsService}  - Operator must be registered via {registerAsOperator} If the operator has registered this service, the relationship status will be set to `RelationshipV2.Status.Active`. Otherwise, the relationship status will be set to `RelationshipV2.Status.ServiceRegistered`.",
            "params": { "operator": "Address of the operator to pair with the service" }
          },
          "registerServiceToOperator(address)": {
            "details": "To call this function, the following conditions must be met:  - Service must be registered via {registerAsService}  - Operator must be registered via {registerAsOperator} If the service has registered this operator, the relationship status will be set to `RelationshipV2.Status.Active`. Otherwise, the relationship status will be set to `RelationshipV2.Status.OperatorRegistered`.",
            "params": { "service": "Address of the service to pair with the operator" }
          },
          "setDefaultWithdrawalDelay(uint32)": {
            "details": "This function can only be called by the contract owner. The new default delay is only applied to new operators and operators updating their withdrawal delay.",
            "params": { "delay": "The new default withdrawal delay in seconds" }
          },
          "setMaxActiveRelationshipsForOperator(uint8)": {
            "details": "Only the contract owner can call this function. The new maximum must be greater than zero and greater than the current maximum.",
            "params": { "maxActive": "The new maximum number of active relationships" }
          },
          "setMaxActiveRelationshipsForService(uint8)": {
            "details": "Only the contract owner can call this function. The new maximum must be greater than zero and greater than the current maximum.",
            "params": { "maxActive": "The new maximum number of active relationships" }
          },
          "setMinWithdrawalDelay(uint32)": {
            "details": "This function can only be called by the service. All of the service's active operators must have a withdrawal delay greater than or equal to this value, otherwise the function will revert. The delay must be greater than zero.",
            "params": { "delay": "The new minimum withdrawal delay in seconds" }
          },
          "setWithdrawalDelay(uint32)": {
            "details": "Only the operator can set this value. The delay must be at least equal to the DEFAULT_WITHDRAWAL_DELAY (7 days) and must be greater than or equal to any active service's minimum withdrawal delay.",
            "params": { "delay": "The delay in seconds before a withdrawal can be processed" }
          },
          "updateMetadata(string,string)": {
            "details": "This function can be called by both services and operators. Emits a `MetadataUpdated` event with the new URI and name. Name and URI are not validated or stored on-chain. Non-compliant uri or name will not affect the REGISTRY, given its offchain uses.",
            "params": {
              "name": "Name of the provider's project to display in the UI",
              "uri": "URI of the provider's project to display in the UI"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "approveSlashingFor(address)": {
            "notice": "Approves slashing parameters for a service the operator is validating"
          },
          "deregisterOperatorFromService(address)": {
            "notice": "Deregisters an operator from a service (the caller is the service)"
          },
          "deregisterServiceFromOperator(address)": {
            "notice": "Deregisters a service from an operator (the caller is the operator)"
          },
          "disableSlashing()": { "notice": "Disables slashing for a service" },
          "enableSlashing((address,uint24,uint32))": {
            "notice": "Enables slashing for a service by providing slash parameters"
          },
          "getActiveOperatorCount(address)": {
            "notice": "Gets the number of active operators registered to a service"
          },
          "getActiveServiceCount(address)": {
            "notice": "Gets the number of active services registered to an operator"
          },
          "getMaxActiveRelationshipsForOperator()": {
            "notice": "Gets the current maximum number of active relationships allowed"
          },
          "getMaxActiveRelationshipsForService()": {
            "notice": "Gets the current maximum number of active relationships allowed"
          },
          "getMinWithdrawalDelay(address)": { "notice": "Gets the minimum withdrawal delay for a service" },
          "getRelationshipStatus(address,address)": {
            "notice": "Gets the current relationship status for a given service-operator pair"
          },
          "getRelationshipStatusAt(address,address,uint32)": {
            "notice": "Gets the relationship status for a given service-operator pair at a specific timestamp"
          },
          "getSlashParameter(address)": { "notice": "Gets the current slash parameters for a given service" },
          "getSlashParameterAt(address,address,uint32)": {
            "notice": "Gets the slash parameters that an operator had approved at a specific timestamp"
          },
          "getWithdrawalDelay(address)": { "notice": "Gets the withdrawal delay for an operator's vault" },
          "isOperator(address)": { "notice": "Checks if an account is registered as an operator" },
          "isService(address)": { "notice": "Checks if an account is registered as a service" },
          "registerAsOperator(string,string)": { "notice": "Registers the caller as an operator" },
          "registerAsService(string,string)": { "notice": "Registers the caller as a service provider" },
          "registerOperatorToService(address)": {
            "notice": "Registers an operator to a service (the caller is the service)"
          },
          "registerServiceToOperator(address)": {
            "notice": "Registers a service to an operator (the caller is the operator)"
          },
          "setDefaultWithdrawalDelay(uint32)": { "notice": "Sets the default withdrawal delay for operators's vaults" },
          "setMaxActiveRelationshipsForOperator(uint8)": {
            "notice": "Sets the maximum number of active relationships allowed for operators"
          },
          "setMaxActiveRelationshipsForService(uint8)": {
            "notice": "Sets the maximum number of active relationships allowed for services"
          },
          "setMinWithdrawalDelay(uint32)": { "notice": "Sets the minimum withdrawal delay for a service" },
          "setWithdrawalDelay(uint32)": { "notice": "Sets the withdrawal delay for an operator's vault" },
          "updateMetadata(string,string)": { "notice": "Updates metadata for the service or operator" }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@aave/=node_modules/@aave/",
        "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
        "@openzeppelin/foundry-upgrades/=node_modules/@openzeppelin/foundry-upgrades/src/",
        "@satlayer/contracts/=node_modules/@satlayer/contracts/",
        "forge-std/=node_modules/forge-std/src/"
      ],
      "optimizer": { "enabled": true, "runs": 200 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": { "node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol": "ISLAYRegistryV2" },
      "evmVersion": "shanghai",
      "libraries": {}
    },
    "sources": {
      "node_modules/@openzeppelin/contracts/utils/Panic.sol": {
        "keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
        "urls": [
          "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
          "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
        "keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
        "urls": [
          "bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
          "dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol": {
        "keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
        "urls": [
          "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
          "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/structs/Checkpoints.sol": {
        "keccak256": "0xe32a5a466492f6a3b871d705d045fc2f8d6e6c8bf69288011531ff875003993f",
        "urls": [
          "bzz-raw://61c69a907ca80a9cff4bdf30f64d5ee458a6c54f0a87ed7e4c2a1b9275256851",
          "dweb:/ipfs/QmVmhbvE7w5Hs9tj9NBPLk6yAirrEhaRYgTRT9USat4H9a"
        ],
        "license": "MIT"
      },
      "node_modules/@satlayer/contracts/src/RelationshipV2.sol": {
        "keccak256": "0x476a00c6a985c8b5d44c81b800821ca1fb156e4d527414f5227dd1fa500248e2",
        "urls": [
          "bzz-raw://2aa1058d2c60df65d564b4b453efcdd5e602310fb66eac1e313c0390d8eef763",
          "dweb:/ipfs/QmPyFGVcfeo9dRzHVYPaignPyME2pGDKFoNVhEwaZkk3LT"
        ],
        "license": "BUSL-1.1"
      },
      "node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol": {
        "keccak256": "0x51333ef7c92f3f6d94691ea0f966acd07b12dc32277dd81892f6783b3bab2f5a",
        "urls": [
          "bzz-raw://2a20146f9e3a67e6955877ac774d3d0623c80d76a8dcab49fa791cf2bb5b24d3",
          "dweb:/ipfs/QmfVYvZ8pkHvwZbSzWQNkuy3hYmdF7ZkhAmtC9fC8Lftnd"
        ],
        "license": "BUSL-1.1"
      }
    },
    "version": 1
  },
  "storageLayout": { "storage": [], "types": {} },
  "ast": {
    "absolutePath": "node_modules/@satlayer/contracts/src/interface/ISLAYRegistryV2.sol",
    "id": 28123,
    "exportedSymbols": { "ISLAYRegistryV2": [28122], "RelationshipV2": [23014] },
    "nodeType": "SourceUnit",
    "src": "37:19535:83",
    "nodes": [
      {
        "id": 27785,
        "nodeType": "PragmaDirective",
        "src": "37:24:83",
        "nodes": [],
        "literals": ["solidity", "^", "0.8", ".24"]
      },
      {
        "id": 27787,
        "nodeType": "ImportDirective",
        "src": "63:53:83",
        "nodes": [],
        "absolutePath": "node_modules/@satlayer/contracts/src/RelationshipV2.sol",
        "file": "../RelationshipV2.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 28123,
        "sourceUnit": 23015,
        "symbolAliases": [
          {
            "foreign": {
              "id": 27786,
              "name": "RelationshipV2",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 23014,
              "src": "71:14:83",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 28122,
        "nodeType": "ContractDefinition",
        "src": "418:19153:83",
        "nodes": [
          {
            "id": 27798,
            "nodeType": "StructDefinition",
            "src": "450:430:83",
            "nodes": [],
            "canonicalName": "ISLAYRegistryV2.ServiceEntry",
            "members": [
              {
                "constant": false,
                "id": 27791,
                "mutability": "mutable",
                "name": "registered",
                "nameLocation": "537:10:83",
                "nodeType": "VariableDeclaration",
                "scope": 27798,
                "src": "532:15:83",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                "typeName": {
                  "id": 27790,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "532:4:83",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 27794,
                "mutability": "mutable",
                "name": "slashParameterId",
                "nameLocation": "713:16:83",
                "nodeType": "VariableDeclaration",
                "scope": 27798,
                "src": "706:23:83",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                "typeName": {
                  "id": 27793,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "706:6:83",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 27797,
                "mutability": "mutable",
                "name": "minWithdrawalDelay",
                "nameLocation": "855:18:83",
                "nodeType": "VariableDeclaration",
                "scope": 27798,
                "src": "848:25:83",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                "typeName": {
                  "id": 27796,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "848:6:83",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                },
                "visibility": "internal"
              }
            ],
            "name": "ServiceEntry",
            "nameLocation": "457:12:83",
            "scope": 28122,
            "visibility": "public"
          },
          {
            "id": 27805,
            "nodeType": "StructDefinition",
            "src": "886:312:83",
            "nodes": [],
            "canonicalName": "ISLAYRegistryV2.OperatorEntry",
            "members": [
              {
                "constant": false,
                "id": 27801,
                "mutability": "mutable",
                "name": "registered",
                "nameLocation": "975:10:83",
                "nodeType": "VariableDeclaration",
                "scope": 27805,
                "src": "970:15:83",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                "typeName": {
                  "id": 27800,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "970:4:83",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 27804,
                "mutability": "mutable",
                "name": "withdrawalDelay",
                "nameLocation": "1176:15:83",
                "nodeType": "VariableDeclaration",
                "scope": 27805,
                "src": "1169:22:83",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                "typeName": {
                  "id": 27803,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1169:6:83",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                },
                "visibility": "internal"
              }
            ],
            "name": "OperatorEntry",
            "nameLocation": "893:13:83",
            "scope": 28122,
            "visibility": "public"
          },
          {
            "id": 27816,
            "nodeType": "StructDefinition",
            "src": "1351:741:83",
            "nodes": [],
            "canonicalName": "ISLAYRegistryV2.SlashParameter",
            "documentation": {
              "id": 27806,
              "nodeType": "StructuredDocumentation",
              "src": "1204:142:83",
              "text": " @dev The Slash Parameter for a particular service.\n This struct defines the parameters for slashing in the ecosystem."
            },
            "members": [
              {
                "constant": false,
                "id": 27809,
                "mutability": "mutable",
                "name": "destination",
                "nameLocation": "1545:11:83",
                "nodeType": "VariableDeclaration",
                "scope": 27816,
                "src": "1537:19:83",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                "typeName": {
                  "id": 27808,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1537:7:83",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 27812,
                "mutability": "mutable",
                "name": "maxMbips",
                "nameLocation": "1869:8:83",
                "nodeType": "VariableDeclaration",
                "scope": 27816,
                "src": "1862:15:83",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": { "typeIdentifier": "t_uint24", "typeString": "uint24" },
                "typeName": {
                  "id": 27811,
                  "name": "uint24",
                  "nodeType": "ElementaryTypeName",
                  "src": "1862:6:83",
                  "typeDescriptions": { "typeIdentifier": "t_uint24", "typeString": "uint24" }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 27815,
                "mutability": "mutable",
                "name": "resolutionWindow",
                "nameLocation": "2069:16:83",
                "nodeType": "VariableDeclaration",
                "scope": 27816,
                "src": "2062:23:83",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                "typeName": {
                  "id": 27814,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2062:6:83",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                },
                "visibility": "internal"
              }
            ],
            "name": "SlashParameter",
            "nameLocation": "1358:14:83",
            "scope": 28122,
            "visibility": "public"
          },
          {
            "id": 27821,
            "nodeType": "ErrorDefinition",
            "src": "2332:40:83",
            "nodes": [],
            "documentation": {
              "id": 27817,
              "nodeType": "StructuredDocumentation",
              "src": "2277:50:83",
              "text": "@dev Account is not registered as an operator."
            },
            "errorSelector": "a3a66a17",
            "name": "OperatorNotFound",
            "nameLocation": "2338:16:83",
            "parameters": {
              "id": 27820,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27819,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2363:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27821,
                  "src": "2355:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27818,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2355:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2354:17:83"
            }
          },
          {
            "id": 27826,
            "nodeType": "ErrorDefinition",
            "src": "2431:39:83",
            "nodes": [],
            "documentation": {
              "id": 27822,
              "nodeType": "StructuredDocumentation",
              "src": "2378:48:83",
              "text": "@dev Account is not registered as a service."
            },
            "errorSelector": "b5365807",
            "name": "ServiceNotFound",
            "nameLocation": "2437:15:83",
            "parameters": {
              "id": 27825,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27824,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "2461:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27826,
                  "src": "2453:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27823,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2453:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2452:17:83"
            }
          },
          {
            "id": 27829,
            "nodeType": "ErrorDefinition",
            "src": "2560:38:83",
            "nodes": [],
            "documentation": {
              "id": 27827,
              "nodeType": "StructuredDocumentation",
              "src": "2476:79:83",
              "text": "@dev the operator is already actively registered to max number of services."
            },
            "errorSelector": "bd9b74ad",
            "name": "OperatorRelationshipsExceeded",
            "nameLocation": "2566:29:83",
            "parameters": { "id": 27828, "nodeType": "ParameterList", "parameters": [], "src": "2595:2:83" }
          },
          {
            "id": 27832,
            "nodeType": "ErrorDefinition",
            "src": "2688:37:83",
            "nodes": [],
            "documentation": {
              "id": 27830,
              "nodeType": "StructuredDocumentation",
              "src": "2604:79:83",
              "text": "@dev the service is already actively registered to max number of operators."
            },
            "errorSelector": "ba11b6e7",
            "name": "ServiceRelationshipsExceeded",
            "nameLocation": "2694:28:83",
            "parameters": { "id": 27831, "nodeType": "ParameterList", "parameters": [], "src": "2722:2:83" }
          },
          {
            "id": 27843,
            "nodeType": "ErrorDefinition",
            "src": "2812:134:83",
            "nodes": [],
            "documentation": {
              "id": 27833,
              "nodeType": "StructuredDocumentation",
              "src": "2731:76:83",
              "text": "@dev thrown when a service and operator withdrawal delay does not match."
            },
            "errorSelector": "650a1a91",
            "name": "WithdrawalDelayIncompatible",
            "nameLocation": "2818:27:83",
            "parameters": {
              "id": 27842,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27835,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "2863:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27843,
                  "src": "2855:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27834,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2855:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27837,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "2880:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27843,
                  "src": "2872:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27836,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2872:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27839,
                  "mutability": "mutable",
                  "name": "withdrawalDelay",
                  "nameLocation": "2897:15:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27843,
                  "src": "2890:22:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27838,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2890:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27841,
                  "mutability": "mutable",
                  "name": "minWithdrawalDelay",
                  "nameLocation": "2921:18:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27843,
                  "src": "2914:25:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27840,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2914:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2845:100:83"
            }
          },
          {
            "id": 27848,
            "nodeType": "EventDefinition",
            "src": "3181:49:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27844,
              "nodeType": "StructuredDocumentation",
              "src": "3130:46:83",
              "text": "@dev Emitted when a service is registered."
            },
            "eventSelector": "2fa31fbaacf5eaf61d648ea7528ada6efb69bfb06d2c3bd35ce511a820fce53e",
            "name": "ServiceRegistered",
            "nameLocation": "3187:17:83",
            "parameters": {
              "id": 27847,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27846,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "3221:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27848,
                  "src": "3205:23:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27845,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3205:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3204:25:83"
            }
          },
          {
            "id": 27853,
            "nodeType": "EventDefinition",
            "src": "3288:51:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27849,
              "nodeType": "StructuredDocumentation",
              "src": "3236:47:83",
              "text": "@dev Emitted when a operator is registered."
            },
            "eventSelector": "4d0eb1f4bac8744fd2be119845e23b3befc88094b42bcda1204c65694a00f9e5",
            "name": "OperatorRegistered",
            "nameLocation": "3294:18:83",
            "parameters": {
              "id": 27852,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27851,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "3329:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27853,
                  "src": "3313:24:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27850,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3313:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3312:26:83"
            }
          },
          {
            "id": 27862,
            "nodeType": "EventDefinition",
            "src": "3701:73:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27854,
              "nodeType": "StructuredDocumentation",
              "src": "3345:351:83",
              "text": " @dev Emitted when a service is registered with metadata.\n Name and URI are not validated or stored on-chain.\n @param provider The address of the service/operator provider.\n @param uri URI of the provider's project to display in the UI.\n @param name Name of the provider's project to display in the UI."
            },
            "eventSelector": "6c1850fce35387a891e82ca88e975790ab6f0709e9ed6842e01397f296012a7e",
            "name": "MetadataUpdated",
            "nameLocation": "3707:15:83",
            "parameters": {
              "id": 27861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27856,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "provider",
                  "nameLocation": "3739:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27862,
                  "src": "3723:24:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27855,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3723:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27858,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "uri",
                  "nameLocation": "3756:3:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27862,
                  "src": "3749:10:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                  "typeName": {
                    "id": 27857,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3749:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27860,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "3768:4:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27862,
                  "src": "3761:11:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                  "typeName": {
                    "id": 27859,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3761:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3722:51:83"
            }
          },
          {
            "id": 27874,
            "nodeType": "EventDefinition",
            "src": "4119:146:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27863,
              "nodeType": "StructuredDocumentation",
              "src": "3780:334:83",
              "text": " @dev Emitted when a service-operator relationship is updated.\n @param service The address of the service.\n @param operator The address of the operator.\n @param status The updated relationship status.\n @param slashParameterId The ID of the slash parameter if slashing is enabled, otherwise 0."
            },
            "eventSelector": "21765f04287d7845df78e83515630836500dd5e89d866d34751b5177a96da4c6",
            "name": "RelationshipUpdated",
            "nameLocation": "4125:19:83",
            "parameters": {
              "id": 27873,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27865,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "4170:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27874,
                  "src": "4154:23:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27864,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4154:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27867,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "4195:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27874,
                  "src": "4179:24:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27866,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4179:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27870,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "status",
                  "nameLocation": "4227:6:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27874,
                  "src": "4205:28:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_Status_$22843",
                    "typeString": "enum RelationshipV2.Status"
                  },
                  "typeName": {
                    "id": 27869,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27868,
                      "name": "RelationshipV2.Status",
                      "nameLocations": ["4205:14:83", "4220:6:83"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 22843,
                      "src": "4205:21:83"
                    },
                    "referencedDeclaration": 22843,
                    "src": "4205:21:83",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Status_$22843",
                      "typeString": "enum RelationshipV2.Status"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27872,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "slashParameterId",
                  "nameLocation": "4242:16:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27874,
                  "src": "4235:23:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27871,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4235:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4144:120:83"
            }
          },
          {
            "id": 27881,
            "nodeType": "EventDefinition",
            "src": "4481:69:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27875,
              "nodeType": "StructuredDocumentation",
              "src": "4271:205:83",
              "text": " @dev Emitted when an operator updates the withdrawal delay.\n @param operator The address of the operator setting the delay.\n @param delay The new withdrawal delay in seconds."
            },
            "eventSelector": "8accf516e9dcf834aa25a580b9beb0b2444e5a35b3162fc21cfd49565bed0a4a",
            "name": "WithdrawalDelayUpdated",
            "nameLocation": "4487:22:83",
            "parameters": {
              "id": 27880,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27877,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "4526:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27881,
                  "src": "4510:24:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27876,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4510:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27879,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "delay",
                  "nameLocation": "4543:5:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27881,
                  "src": "4536:12:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27878,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4536:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4509:40:83"
            }
          },
          {
            "id": 27888,
            "nodeType": "EventDefinition",
            "src": "4778:71:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27882,
              "nodeType": "StructuredDocumentation",
              "src": "4556:217:83",
              "text": " @dev Emitted when a service updates the minimum withdrawal delay.\n @param service The address of the service setting the delay.\n @param delay The new minimum withdrawal delay in seconds."
            },
            "eventSelector": "12cae11e6575143dc91be041916646a29e4e9af609b96be54454d8ca825b1644",
            "name": "MinWithdrawalDelayUpdated",
            "nameLocation": "4784:25:83",
            "parameters": {
              "id": 27887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27884,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "4826:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27888,
                  "src": "4810:23:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27883,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4810:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27886,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "delay",
                  "nameLocation": "4842:5:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27888,
                  "src": "4835:12:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27885,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4835:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4809:39:83"
            }
          },
          {
            "id": 27895,
            "nodeType": "EventDefinition",
            "src": "5078:70:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27889,
              "nodeType": "StructuredDocumentation",
              "src": "4855:218:83",
              "text": " @dev Emitted when the default withdrawal delay is updated.\n @param oldDelay The previous default withdrawal delay in seconds.\n @param newDelay The new default withdrawal delay in seconds."
            },
            "eventSelector": "7d96978277a4acf1fa8af376bc53af1059e1b5e52b97732645e8bf570bd852fd",
            "name": "DefaultWithdrawalDelayUpdated",
            "nameLocation": "5084:29:83",
            "parameters": {
              "id": 27894,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27891,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldDelay",
                  "nameLocation": "5121:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27895,
                  "src": "5114:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27890,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5114:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27893,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newDelay",
                  "nameLocation": "5138:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27895,
                  "src": "5131:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27892,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5131:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5113:34:83"
            }
          },
          {
            "id": 27906,
            "nodeType": "EventDefinition",
            "src": "5524:116:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27896,
              "nodeType": "StructuredDocumentation",
              "src": "5154:365:83",
              "text": " @dev Emitted when {SlashParameter} for a service is updated.\n @param service The address of the service\n @param destination The address at which slash collateral will be moved.\n @param maxMbips The maximum slashable amount in mbips.\n @param resolutionWindow An operator's refutable period in seconds in the event of slash."
            },
            "eventSelector": "f83560c52fae7525e369b176773b2388c82c3538dea009c1c5fca741d5d613a0",
            "name": "SlashParameterUpdated",
            "nameLocation": "5530:21:83",
            "parameters": {
              "id": 27905,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27898,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "5568:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27906,
                  "src": "5552:23:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27897,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5552:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27900,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "5585:11:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27906,
                  "src": "5577:19:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27899,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5577:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27902,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "maxMbips",
                  "nameLocation": "5605:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27906,
                  "src": "5598:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint24", "typeString": "uint24" },
                  "typeName": {
                    "id": 27901,
                    "name": "uint24",
                    "nodeType": "ElementaryTypeName",
                    "src": "5598:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint24", "typeString": "uint24" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27904,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "resolutionWindow",
                  "nameLocation": "5622:16:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27906,
                  "src": "5615:23:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27903,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5615:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5551:88:83"
            }
          },
          {
            "id": 27913,
            "nodeType": "EventDefinition",
            "src": "5910:83:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27907,
              "nodeType": "StructuredDocumentation",
              "src": "5646:259:83",
              "text": " @dev Emitted when owner updates the maximum number of active relationships for a service\n @param oldMaxActive The previous maximum number of active relationships.\n @param maxActive The new maximum number of active relationships."
            },
            "eventSelector": "9970a620521c7aa30265e01b9d490c9e9802074a8b9015fed1af3665bbc083aa",
            "name": "MaxActiveRelationshipsForServiceUpdated",
            "nameLocation": "5916:39:83",
            "parameters": {
              "id": 27912,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27909,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldMaxActive",
                  "nameLocation": "5962:12:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27913,
                  "src": "5956:18:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                  "typeName": {
                    "id": 27908,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "5956:5:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27911,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "maxActive",
                  "nameLocation": "5982:9:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27913,
                  "src": "5976:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                  "typeName": {
                    "id": 27910,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "5976:5:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5955:37:83"
            }
          },
          {
            "id": 27920,
            "nodeType": "EventDefinition",
            "src": "6265:84:83",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 27914,
              "nodeType": "StructuredDocumentation",
              "src": "5999:261:83",
              "text": " @dev Emitted when owner updates the maximum number of active relationships for an operator\n @param oldMaxActive The previous maximum number of active relationships.\n @param maxActive The new maximum number of active relationships."
            },
            "eventSelector": "4e2399155205fd27a6de74fcaa614db3a3bc3edaf989234fb34032f0920f39cd",
            "name": "MaxActiveRelationshipsForOperatorUpdated",
            "nameLocation": "6271:40:83",
            "parameters": {
              "id": 27919,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27916,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldMaxActive",
                  "nameLocation": "6318:12:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27920,
                  "src": "6312:18:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                  "typeName": {
                    "id": 27915,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "6312:5:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27918,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "maxActive",
                  "nameLocation": "6338:9:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27920,
                  "src": "6332:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                  "typeName": {
                    "id": 27917,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "6332:5:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6311:37:83"
            }
          },
          {
            "id": 27928,
            "nodeType": "FunctionDefinition",
            "src": "6983:79:83",
            "nodes": [],
            "documentation": {
              "id": 27921,
              "nodeType": "StructuredDocumentation",
              "src": "6536:442:83",
              "text": " @notice Registers the caller as a service provider\n @dev URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed.\n The caller can be both a service and an operator simultaneously. This relationship is not exclusive.\n @param uri URI of the service's project to display in the UI\n @param name Name of the service's project to display in the UI"
            },
            "functionSelector": "d12a833c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerAsService",
            "nameLocation": "6992:17:83",
            "parameters": {
              "id": 27926,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27923,
                  "mutability": "mutable",
                  "name": "uri",
                  "nameLocation": "7026:3:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27928,
                  "src": "7010:19:83",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": { "typeIdentifier": "t_string_calldata_ptr", "typeString": "string" },
                  "typeName": {
                    "id": 27922,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7010:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27925,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "7047:4:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27928,
                  "src": "7031:20:83",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": { "typeIdentifier": "t_string_calldata_ptr", "typeString": "string" },
                  "typeName": {
                    "id": 27924,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7031:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7009:43:83"
            },
            "returnParameters": { "id": 27927, "nodeType": "ParameterList", "parameters": [], "src": "7061:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27936,
            "nodeType": "FunctionDefinition",
            "src": "7510:80:83",
            "nodes": [],
            "documentation": {
              "id": 27929,
              "nodeType": "StructuredDocumentation",
              "src": "7068:437:83",
              "text": " @notice Registers the caller as an operator\n @dev URI and name are not stored on-chain, they're emitted in an event {MetadataUpdated} and separately indexed.\n The caller can be both a service and an operator simultaneously. This relationship is not exclusive.\n @param uri URI of the operator's project to display in the UI\n @param name Name of the operator's project to display in the UI"
            },
            "functionSelector": "891a081f",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerAsOperator",
            "nameLocation": "7519:18:83",
            "parameters": {
              "id": 27934,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27931,
                  "mutability": "mutable",
                  "name": "uri",
                  "nameLocation": "7554:3:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27936,
                  "src": "7538:19:83",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": { "typeIdentifier": "t_string_calldata_ptr", "typeString": "string" },
                  "typeName": {
                    "id": 27930,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7538:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27933,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "7575:4:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27936,
                  "src": "7559:20:83",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": { "typeIdentifier": "t_string_calldata_ptr", "typeString": "string" },
                  "typeName": {
                    "id": 27932,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "7559:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7537:43:83"
            },
            "returnParameters": { "id": 27935, "nodeType": "ParameterList", "parameters": [], "src": "7589:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27944,
            "nodeType": "FunctionDefinition",
            "src": "8103:76:83",
            "nodes": [],
            "documentation": {
              "id": 27937,
              "nodeType": "StructuredDocumentation",
              "src": "7596:502:83",
              "text": " @notice Updates metadata for the service or operator\n @dev This function can be called by both services and operators.\n Emits a `MetadataUpdated` event with the new URI and name.\n Name and URI are not validated or stored on-chain.\n Non-compliant uri or name will not affect the REGISTRY, given its offchain uses.\n @param uri URI of the provider's project to display in the UI\n @param name Name of the provider's project to display in the UI"
            },
            "functionSelector": "56ce0e6c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateMetadata",
            "nameLocation": "8112:14:83",
            "parameters": {
              "id": 27942,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27939,
                  "mutability": "mutable",
                  "name": "uri",
                  "nameLocation": "8143:3:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27944,
                  "src": "8127:19:83",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": { "typeIdentifier": "t_string_calldata_ptr", "typeString": "string" },
                  "typeName": {
                    "id": 27938,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8127:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27941,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "8164:4:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27944,
                  "src": "8148:20:83",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": { "typeIdentifier": "t_string_calldata_ptr", "typeString": "string" },
                  "typeName": {
                    "id": 27940,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8148:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8126:43:83"
            },
            "returnParameters": { "id": 27943, "nodeType": "ParameterList", "parameters": [], "src": "8178:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27950,
            "nodeType": "FunctionDefinition",
            "src": "8785:62:83",
            "nodes": [],
            "documentation": {
              "id": 27945,
              "nodeType": "StructuredDocumentation",
              "src": "8185:595:83",
              "text": " @notice Registers an operator to a service (the caller is the service)\n @dev To call this function, the following conditions must be met:\n  - Service must be registered via {registerAsService}\n  - Operator must be registered via {registerAsOperator}\n If the operator has registered this service, the relationship status will be set to `RelationshipV2.Status.Active`.\n Otherwise, the relationship status will be set to `RelationshipV2.Status.ServiceRegistered`.\n @param operator Address of the operator to pair with the service"
            },
            "functionSelector": "bcac0a02",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerOperatorToService",
            "nameLocation": "8794:25:83",
            "parameters": {
              "id": 27948,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27947,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "8828:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27950,
                  "src": "8820:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27946,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8820:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8819:18:83"
            },
            "returnParameters": { "id": 27949, "nodeType": "ParameterList", "parameters": [], "src": "8846:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27956,
            "nodeType": "FunctionDefinition",
            "src": "9186:66:83",
            "nodes": [],
            "documentation": {
              "id": 27951,
              "nodeType": "StructuredDocumentation",
              "src": "8853:328:83",
              "text": " @notice Deregisters an operator from a service (the caller is the service)\n @dev Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the operator\n from the service's active relationships.\n @param operator Address of the operator to opt out of the relationship"
            },
            "functionSelector": "8e61af12",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deregisterOperatorFromService",
            "nameLocation": "9195:29:83",
            "parameters": {
              "id": 27954,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27953,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "9233:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27956,
                  "src": "9225:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27952,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9225:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9224:18:83"
            },
            "returnParameters": { "id": 27955, "nodeType": "ParameterList", "parameters": [], "src": "9251:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27962,
            "nodeType": "FunctionDefinition",
            "src": "9859:61:83",
            "nodes": [],
            "documentation": {
              "id": 27957,
              "nodeType": "StructuredDocumentation",
              "src": "9258:596:83",
              "text": " @notice Registers a service to an operator (the caller is the operator)\n @dev To call this function, the following conditions must be met:\n  - Service must be registered via {registerAsService}\n  - Operator must be registered via {registerAsOperator}\n If the service has registered this operator, the relationship status will be set to `RelationshipV2.Status.Active`.\n Otherwise, the relationship status will be set to `RelationshipV2.Status.OperatorRegistered`.\n @param service Address of the service to pair with the operator"
            },
            "functionSelector": "ca41e40c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerServiceToOperator",
            "nameLocation": "9868:25:83",
            "parameters": {
              "id": 27960,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27959,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "9902:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27962,
                  "src": "9894:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27958,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9894:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9893:17:83"
            },
            "returnParameters": { "id": 27961, "nodeType": "ParameterList", "parameters": [], "src": "9919:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27968,
            "nodeType": "FunctionDefinition",
            "src": "10258:65:83",
            "nodes": [],
            "documentation": {
              "id": 27963,
              "nodeType": "StructuredDocumentation",
              "src": "9926:327:83",
              "text": " @notice Deregisters a service from an operator (the caller is the operator)\n @dev Sets the relationship status to `RelationshipV2.Status.Inactive` and removes the service\n from the operator's active relationships.\n @param service Address of the service to opt out of the relationship"
            },
            "functionSelector": "dcef4403",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deregisterServiceFromOperator",
            "nameLocation": "10267:29:83",
            "parameters": {
              "id": 27966,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27965,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "10305:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27968,
                  "src": "10297:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27964,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10297:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10296:17:83"
            },
            "returnParameters": { "id": 27967, "nodeType": "ParameterList", "parameters": [], "src": "10322:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27979,
            "nodeType": "FunctionDefinition",
            "src": "10702:112:83",
            "nodes": [],
            "documentation": {
              "id": 27969,
              "nodeType": "StructuredDocumentation",
              "src": "10329:368:83",
              "text": " @notice Gets the current relationship status for a given service-operator pair\n @dev Retrieves the status from the latest checkpoint in the relationship history\n @param service The address of the service\n @param operator The address of the operator\n @return The latest relationship status for the service-operator pair"
            },
            "functionSelector": "621e0299",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRelationshipStatus",
            "nameLocation": "10711:21:83",
            "parameters": {
              "id": 27974,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27971,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "10741:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27979,
                  "src": "10733:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27970,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10733:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27973,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "10758:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27979,
                  "src": "10750:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27972,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10750:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10732:35:83"
            },
            "returnParameters": {
              "id": 27978,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27977,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 27979,
                  "src": "10791:21:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_Status_$22843",
                    "typeString": "enum RelationshipV2.Status"
                  },
                  "typeName": {
                    "id": 27976,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27975,
                      "name": "RelationshipV2.Status",
                      "nameLocations": ["10791:14:83", "10806:6:83"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 22843,
                      "src": "10791:21:83"
                    },
                    "referencedDeclaration": 22843,
                    "src": "10791:21:83",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Status_$22843",
                      "typeString": "enum RelationshipV2.Status"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10790:23:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 27992,
            "nodeType": "FunctionDefinition",
            "src": "11273:156:83",
            "nodes": [],
            "documentation": {
              "id": 27980,
              "nodeType": "StructuredDocumentation",
              "src": "10820:448:83",
              "text": " @notice Gets the relationship status for a given service-operator pair at a specific timestamp\n @dev Retrieves the status from the checkpoint history at the specified timestamp\n @param service The address of the service\n @param operator The address of the operator\n @param timestamp The timestamp to check the relationship status at\n @return The relationship status at the specified timestamp"
            },
            "functionSelector": "b1ad5743",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRelationshipStatusAt",
            "nameLocation": "11282:23:83",
            "parameters": {
              "id": 27987,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27982,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "11314:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27992,
                  "src": "11306:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27981,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11306:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27984,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "11331:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27992,
                  "src": "11323:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27983,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11323:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 27986,
                  "mutability": "mutable",
                  "name": "timestamp",
                  "nameLocation": "11348:9:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 27992,
                  "src": "11341:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 27985,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "11341:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11305:53:83"
            },
            "returnParameters": {
              "id": 27991,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27990,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 27992,
                  "src": "11406:21:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_Status_$22843",
                    "typeString": "enum RelationshipV2.Status"
                  },
                  "typeName": {
                    "id": 27989,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 27988,
                      "name": "RelationshipV2.Status",
                      "nameLocations": ["11406:14:83", "11421:6:83"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 22843,
                      "src": "11406:21:83"
                    },
                    "referencedDeclaration": 22843,
                    "src": "11406:21:83",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Status_$22843",
                      "typeString": "enum RelationshipV2.Status"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11405:23:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28000,
            "nodeType": "FunctionDefinition",
            "src": "11718:66:83",
            "nodes": [],
            "documentation": {
              "id": 27993,
              "nodeType": "StructuredDocumentation",
              "src": "11435:278:83",
              "text": " @notice Checks if an account is registered as an operator\n @dev Returns the registration status from the operators mapping\n @param account The address to check\n @return True if the address is registered as an operator, false otherwise"
            },
            "functionSelector": "6d70f7ae",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isOperator",
            "nameLocation": "11727:10:83",
            "parameters": {
              "id": 27996,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27995,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "11746:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28000,
                  "src": "11738:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 27994,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11738:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11737:17:83"
            },
            "returnParameters": {
              "id": 27999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27998,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28000,
                  "src": "11778:4:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 27997,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11778:4:83",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11777:6:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28008,
            "nodeType": "FunctionDefinition",
            "src": "12068:65:83",
            "nodes": [],
            "documentation": {
              "id": 28001,
              "nodeType": "StructuredDocumentation",
              "src": "11790:273:83",
              "text": " @notice Checks if an account is registered as a service\n @dev Returns the registration status from the services mapping\n @param account The address to check\n @return True if the address is registered as a service, false otherwise"
            },
            "functionSelector": "e9d8dbfd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isService",
            "nameLocation": "12077:9:83",
            "parameters": {
              "id": 28004,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28003,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "12095:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28008,
                  "src": "12087:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28002,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12087:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12086:17:83"
            },
            "returnParameters": {
              "id": 28007,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28006,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28008,
                  "src": "12127:4:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                  "typeName": {
                    "id": 28005,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "12127:4:83",
                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12126:6:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28014,
            "nodeType": "FunctionDefinition",
            "src": "12520:51:83",
            "nodes": [],
            "documentation": {
              "id": 28009,
              "nodeType": "StructuredDocumentation",
              "src": "12139:376:83",
              "text": " @notice Sets the withdrawal delay for an operator's vault\n @dev Only the operator can set this value. The delay must be at least equal to the DEFAULT_WITHDRAWAL_DELAY (7 days)\n and must be greater than or equal to any active service's minimum withdrawal delay.\n @param delay The delay in seconds before a withdrawal can be processed"
            },
            "functionSelector": "58715e3b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setWithdrawalDelay",
            "nameLocation": "12529:18:83",
            "parameters": {
              "id": 28012,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28011,
                  "mutability": "mutable",
                  "name": "delay",
                  "nameLocation": "12555:5:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28014,
                  "src": "12548:12:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 28010,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12548:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12547:14:83"
            },
            "returnParameters": { "id": 28013, "nodeType": "ParameterList", "parameters": [], "src": "12570:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28022,
            "nodeType": "FunctionDefinition",
            "src": "12842:77:83",
            "nodes": [],
            "documentation": {
              "id": 28015,
              "nodeType": "StructuredDocumentation",
              "src": "12577:260:83",
              "text": " @notice Gets the withdrawal delay for an operator's vault\n @dev Returns the configured withdrawal delay for the specified operator\n @param operator The address of the operator\n @return The withdrawal delay in seconds"
            },
            "functionSelector": "b1e50829",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getWithdrawalDelay",
            "nameLocation": "12851:18:83",
            "parameters": {
              "id": 28018,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28017,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "12878:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28022,
                  "src": "12870:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28016,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "12870:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12869:18:83"
            },
            "returnParameters": {
              "id": 28021,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28020,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28022,
                  "src": "12911:6:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 28019,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "12911:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12910:8:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28029,
            "nodeType": "FunctionDefinition",
            "src": "13633:68:83",
            "nodes": [],
            "documentation": {
              "id": 28023,
              "nodeType": "StructuredDocumentation",
              "src": "12925:703:83",
              "text": " @notice Enables slashing for a service by providing slash parameters\n @dev The caller must be a registered service. This sets up the parameters that will be used\n when slashing is applied to operators who have approved slashing for this service.\n @param parameter The slash parameters to be set for the service, containing:\n - `destination`: Address where the slashed collateral will be moved to at the end of the slashing lifecycle\n - `maxMbips`: Maximum slashable amount in milli-bips (1 milli-bip = 0.00001%, 10,000,000 milli-bips = 100%)\n - `resolutionWindow`: Time window in seconds during which an operator can refute slash accusations"
            },
            "functionSelector": "0793ae7b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "enableSlashing",
            "nameLocation": "13642:14:83",
            "parameters": {
              "id": 28027,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28026,
                  "mutability": "mutable",
                  "name": "parameter",
                  "nameLocation": "13681:9:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28029,
                  "src": "13657:33:83",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SlashParameter_$27816_calldata_ptr",
                    "typeString": "struct ISLAYRegistryV2.SlashParameter"
                  },
                  "typeName": {
                    "id": 28025,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28024,
                      "name": "SlashParameter",
                      "nameLocations": ["13657:14:83"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27816,
                      "src": "13657:14:83"
                    },
                    "referencedDeclaration": 27816,
                    "src": "13657:14:83",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SlashParameter_$27816_storage_ptr",
                      "typeString": "struct ISLAYRegistryV2.SlashParameter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "13656:35:83"
            },
            "returnParameters": { "id": 28028, "nodeType": "ParameterList", "parameters": [], "src": "13700:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28033,
            "nodeType": "FunctionDefinition",
            "src": "14079:36:83",
            "nodes": [],
            "documentation": {
              "id": 28030,
              "nodeType": "StructuredDocumentation",
              "src": "13707:367:83",
              "text": " @notice Disables slashing for a service\n @dev The caller must be a registered service. This function:\n - Sets the slash parameter ID to 0 (indicating slashing is disabled)\n - Does not remove existing slash relationships\n - Prevents new slash relationships from being created when operators call {approveSlashingFor(address)}"
            },
            "functionSelector": "832025f9",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "disableSlashing",
            "nameLocation": "14088:15:83",
            "parameters": { "id": 28031, "nodeType": "ParameterList", "parameters": [], "src": "14103:2:83" },
            "returnParameters": { "id": 28032, "nodeType": "ParameterList", "parameters": [], "src": "14114:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28039,
            "nodeType": "FunctionDefinition",
            "src": "14961:54:83",
            "nodes": [],
            "documentation": {
              "id": 28034,
              "nodeType": "StructuredDocumentation",
              "src": "14121:835:83",
              "text": " @notice Approves slashing parameters for a service the operator is validating\n @dev This function allows an operator to enable, disable, or update slashing parameters for a service.\n Requirements:\n - The caller must be a registered operator\n - The service and operator must have an active relationship\n - To enable slashing: the service must have already enabled slashing via {enableSlashing(SlashParameter)}\n - To disable slashing: the service must have already disabled slashing via {disableSlashing()}\n - To update parameters: the service must have registered new slash parameters via {enableSlashing(SlashParameter)}\n - The function will revert if no update is registered\n @param service The address of the service for which slashing is being approved"
            },
            "functionSelector": "7218c6a7",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "approveSlashingFor",
            "nameLocation": "14970:18:83",
            "parameters": {
              "id": 28037,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28036,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "14997:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28039,
                  "src": "14989:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28035,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "14989:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14988:17:83"
            },
            "returnParameters": { "id": 28038, "nodeType": "ParameterList", "parameters": [], "src": "15014:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28048,
            "nodeType": "FunctionDefinition",
            "src": "15366:90:83",
            "nodes": [],
            "documentation": {
              "id": 28040,
              "nodeType": "StructuredDocumentation",
              "src": "15021:340:83",
              "text": " @notice Gets the current slash parameters for a given service\n @dev Retrieves the slash parameters that are currently set for the specified service.\n Reverts if slashing is not enabled for the service.\n @param service The address of the service\n @return The slash parameters for the service"
            },
            "functionSelector": "48694118",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSlashParameter",
            "nameLocation": "15375:17:83",
            "parameters": {
              "id": 28043,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28042,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "15401:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28048,
                  "src": "15393:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28041,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "15393:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15392:17:83"
            },
            "returnParameters": {
              "id": 28047,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28046,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28048,
                  "src": "15433:21:83",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SlashParameter_$27816_memory_ptr",
                    "typeString": "struct ISLAYRegistryV2.SlashParameter"
                  },
                  "typeName": {
                    "id": 28045,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28044,
                      "name": "SlashParameter",
                      "nameLocations": ["15433:14:83"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27816,
                      "src": "15433:14:83"
                    },
                    "referencedDeclaration": 27816,
                    "src": "15433:14:83",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SlashParameter_$27816_storage_ptr",
                      "typeString": "struct ISLAYRegistryV2.SlashParameter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15432:23:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28054,
            "nodeType": "FunctionDefinition",
            "src": "15787:71:83",
            "nodes": [],
            "documentation": {
              "id": 28049,
              "nodeType": "StructuredDocumentation",
              "src": "15462:320:83",
              "text": " @notice Sets the maximum number of active relationships allowed for services\n @dev Only the contract owner can call this function. The new maximum must be greater than zero\n and greater than the current maximum.\n @param maxActive The new maximum number of active relationships"
            },
            "functionSelector": "81d18842",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMaxActiveRelationshipsForService",
            "nameLocation": "15796:35:83",
            "parameters": {
              "id": 28052,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28051,
                  "mutability": "mutable",
                  "name": "maxActive",
                  "nameLocation": "15838:9:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28054,
                  "src": "15832:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                  "typeName": {
                    "id": 28050,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "15832:5:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15831:17:83"
            },
            "returnParameters": { "id": 28053, "nodeType": "ParameterList", "parameters": [], "src": "15857:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28060,
            "nodeType": "FunctionDefinition",
            "src": "16190:72:83",
            "nodes": [],
            "documentation": {
              "id": 28055,
              "nodeType": "StructuredDocumentation",
              "src": "15864:321:83",
              "text": " @notice Sets the maximum number of active relationships allowed for operators\n @dev Only the contract owner can call this function. The new maximum must be greater than zero\n and greater than the current maximum.\n @param maxActive The new maximum number of active relationships"
            },
            "functionSelector": "9e2d5ce8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMaxActiveRelationshipsForOperator",
            "nameLocation": "16199:36:83",
            "parameters": {
              "id": 28058,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28057,
                  "mutability": "mutable",
                  "name": "maxActive",
                  "nameLocation": "16242:9:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28060,
                  "src": "16236:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                  "typeName": {
                    "id": 28056,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "16236:5:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16235:17:83"
            },
            "returnParameters": { "id": 28059, "nodeType": "ParameterList", "parameters": [], "src": "16261:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28066,
            "nodeType": "FunctionDefinition",
            "src": "16523:77:83",
            "nodes": [],
            "documentation": {
              "id": 28061,
              "nodeType": "StructuredDocumentation",
              "src": "16268:250:83",
              "text": " @notice Gets the current maximum number of active relationships allowed\n @dev Returns the maximum number of active relationships that a service can have\n @return The maximum number of active relationships allowed"
            },
            "functionSelector": "d1b9d6e2",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMaxActiveRelationshipsForService",
            "nameLocation": "16532:35:83",
            "parameters": { "id": 28062, "nodeType": "ParameterList", "parameters": [], "src": "16567:2:83" },
            "returnParameters": {
              "id": 28065,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28064,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28066,
                  "src": "16593:5:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                  "typeName": {
                    "id": 28063,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "16593:5:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16592:7:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28072,
            "nodeType": "FunctionDefinition",
            "src": "16863:78:83",
            "nodes": [],
            "documentation": {
              "id": 28067,
              "nodeType": "StructuredDocumentation",
              "src": "16606:252:83",
              "text": " @notice Gets the current maximum number of active relationships allowed\n @dev Returns the maximum number of active relationships that an operator can have\n @return The maximum number of active relationships allowed"
            },
            "functionSelector": "fd864e5e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMaxActiveRelationshipsForOperator",
            "nameLocation": "16872:36:83",
            "parameters": { "id": 28068, "nodeType": "ParameterList", "parameters": [], "src": "16908:2:83" },
            "returnParameters": {
              "id": 28071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28070,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28072,
                  "src": "16934:5:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                  "typeName": {
                    "id": 28069,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "16934:5:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "16933:7:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28085,
            "nodeType": "FunctionDefinition",
            "src": "17501:152:83",
            "nodes": [],
            "documentation": {
              "id": 28073,
              "nodeType": "StructuredDocumentation",
              "src": "16947:549:83",
              "text": " @notice Gets the slash parameters that an operator had approved at a specific timestamp\n @dev Retrieves the historical slash parameters for a service-operator relationship at the given timestamp.\n Reverts if slashing was not enabled at that timestamp.\n @param service The address of the service\n @param operator The address of the operator\n @param timestamp The timestamp at which to check the slash parameters\n @return The slash parameters that were in effect at the specified timestamp"
            },
            "functionSelector": "97c459c4",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSlashParameterAt",
            "nameLocation": "17510:19:83",
            "parameters": {
              "id": 28080,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28075,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "17538:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28085,
                  "src": "17530:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28074,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17530:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28077,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "17555:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28085,
                  "src": "17547:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28076,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "17547:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 28079,
                  "mutability": "mutable",
                  "name": "timestamp",
                  "nameLocation": "17572:9:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28085,
                  "src": "17565:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 28078,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "17565:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17529:53:83"
            },
            "returnParameters": {
              "id": 28084,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28083,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28085,
                  "src": "17630:21:83",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SlashParameter_$27816_memory_ptr",
                    "typeString": "struct ISLAYRegistryV2.SlashParameter"
                  },
                  "typeName": {
                    "id": 28082,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 28081,
                      "name": "SlashParameter",
                      "nameLocations": ["17630:14:83"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 27816,
                      "src": "17630:14:83"
                    },
                    "referencedDeclaration": 27816,
                    "src": "17630:14:83",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SlashParameter_$27816_storage_ptr",
                      "typeString": "struct ISLAYRegistryV2.SlashParameter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "17629:23:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28091,
            "nodeType": "FunctionDefinition",
            "src": "18061:54:83",
            "nodes": [],
            "documentation": {
              "id": 28086,
              "nodeType": "StructuredDocumentation",
              "src": "17659:397:83",
              "text": " @notice Sets the minimum withdrawal delay for a service\n @dev This function can only be called by the service. All of the service's active operators\n must have a withdrawal delay greater than or equal to this value, otherwise the function will revert.\n The delay must be greater than zero.\n @param delay The new minimum withdrawal delay in seconds"
            },
            "functionSelector": "4ad88989",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setMinWithdrawalDelay",
            "nameLocation": "18070:21:83",
            "parameters": {
              "id": 28089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28088,
                  "mutability": "mutable",
                  "name": "delay",
                  "nameLocation": "18099:5:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28091,
                  "src": "18092:12:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 28087,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "18092:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18091:14:83"
            },
            "returnParameters": { "id": 28090, "nodeType": "ParameterList", "parameters": [], "src": "18114:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28099,
            "nodeType": "FunctionDefinition",
            "src": "18489:79:83",
            "nodes": [],
            "documentation": {
              "id": 28092,
              "nodeType": "StructuredDocumentation",
              "src": "18121:363:83",
              "text": " @notice Gets the minimum withdrawal delay for a service\n @dev Returns the configured minimum withdrawal delay for the specified service.\n This is the minimum delay that any operator working with this service must respect.\n @param service The address of the service\n @return The minimum withdrawal delay in seconds"
            },
            "functionSelector": "d2cad271",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMinWithdrawalDelay",
            "nameLocation": "18498:21:83",
            "parameters": {
              "id": 28095,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28094,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "18528:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28099,
                  "src": "18520:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28093,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18520:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18519:17:83"
            },
            "returnParameters": {
              "id": 28098,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28097,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28099,
                  "src": "18560:6:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 28096,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "18560:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18559:8:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28105,
            "nodeType": "FunctionDefinition",
            "src": "18910:58:83",
            "nodes": [],
            "documentation": {
              "id": 28100,
              "nodeType": "StructuredDocumentation",
              "src": "18574:331:83",
              "text": " @notice Sets the default withdrawal delay for operators's vaults\n @dev This function can only be called by the contract owner.\n The new default delay is only applied to new operators and operators updating their withdrawal delay.\n @param delay The new default withdrawal delay in seconds"
            },
            "functionSelector": "dcc4605c",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDefaultWithdrawalDelay",
            "nameLocation": "18919:25:83",
            "parameters": {
              "id": 28103,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28102,
                  "mutability": "mutable",
                  "name": "delay",
                  "nameLocation": "18952:5:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28105,
                  "src": "18945:12:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" },
                  "typeName": {
                    "id": 28101,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "18945:6:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint32", "typeString": "uint32" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18944:14:83"
            },
            "returnParameters": { "id": 28104, "nodeType": "ParameterList", "parameters": [], "src": "18967:0:83" },
            "scope": 28122,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28113,
            "nodeType": "FunctionDefinition",
            "src": "19186:81:83",
            "nodes": [],
            "documentation": {
              "id": 28106,
              "nodeType": "StructuredDocumentation",
              "src": "18974:207:83",
              "text": " @notice Gets the number of active operators registered to a service\n @param service The address of the service\n @return The number of active operators registered to the service"
            },
            "functionSelector": "ab06f67e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getActiveOperatorCount",
            "nameLocation": "19195:22:83",
            "parameters": {
              "id": 28109,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28108,
                  "mutability": "mutable",
                  "name": "service",
                  "nameLocation": "19226:7:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28113,
                  "src": "19218:15:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28107,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19218:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19217:17:83"
            },
            "returnParameters": {
              "id": 28112,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28111,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28113,
                  "src": "19258:7:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 28110,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19258:7:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19257:9:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 28121,
            "nodeType": "FunctionDefinition",
            "src": "19488:81:83",
            "nodes": [],
            "documentation": {
              "id": 28114,
              "nodeType": "StructuredDocumentation",
              "src": "19273:210:83",
              "text": " @notice Gets the number of active services registered to an operator\n @param operator The address of the operator\n @return The number of active services registered to the operator"
            },
            "functionSelector": "be732721",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getActiveServiceCount",
            "nameLocation": "19497:21:83",
            "parameters": {
              "id": 28117,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28116,
                  "mutability": "mutable",
                  "name": "operator",
                  "nameLocation": "19527:8:83",
                  "nodeType": "VariableDeclaration",
                  "scope": 28121,
                  "src": "19519:16:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                  "typeName": {
                    "id": 28115,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "19519:7:83",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19518:18:83"
            },
            "returnParameters": {
              "id": 28120,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 28119,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28121,
                  "src": "19560:7:83",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 28118,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "19560:7:83",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19559:9:83"
            },
            "scope": 28122,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ISLAYRegistryV2",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 27788,
          "nodeType": "StructuredDocumentation",
          "src": "118:299:83",
          "text": " @title SLAY Registry Interface\n @notice Interface for the registry that manages services and operators in the SatLayer ecosystem\n @dev This interface defines the contract methods for registering services and operators,\n managing their relationships, and handling slashing parameters"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [28122],
        "name": "ISLAYRegistryV2",
        "nameLocation": "428:15:83",
        "scope": 28123,
        "usedErrors": [27821, 27826, 27829, 27832, 27843],
        "usedEvents": [27848, 27853, 27862, 27874, 27881, 27888, 27895, 27906, 27913, 27920]
      }
    ],
    "license": "BUSL-1.1"
  },
  "id": 83
}
