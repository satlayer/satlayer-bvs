import { compile } from "json-schema-to-typescript";

import { mkdir, writeFile } from "node:fs/promises";
import { join } from "node:path";

const options = {
  bannerComment: "",
  maxItems: 1,
};

/**
 * @param schema {any}
 * @returns {Promise<void>}
 */
async function generate(schema) {
  const name = schema.contract_name.replaceAll("bvs-", "");
  const lines = [
    "// This file was automatically generated by json-schema-to-typescript.",
    "// DO NOT MODIFY IT BY HAND.",
    "",
  ];

  lines.push(
    await compile(schema.instantiate, "InstantiateMsg", options),
    await compile(schema.execute, "ExecuteMsg", options),
  );

  if (schema.query.enum?.length !== 0) {
    lines.push(await compile(schema.query, "QueryMsg", options));
  }

  for (const [key, res] of Object.entries(schema.responses)) {
    lines.push(await compile(res, key, options));
  }

  // Multiple Uint128 and Addr types are emitted in the same file, so we need to remove the duplicates.
  let content = lines.join("\n");
  if (content.includes("\nexport type Uint128 = string;\n")) {
    content = content.replaceAll(/\/\*\*\n( \*.*\n)+ \*\/\nexport type Uint128 = string;\n/g, "");
    content += "\nexport type Uint128 = string;\n";
  }
  if (content.includes("\nexport type Addr = string;\n")) {
    content = content.replaceAll(/\/\*\*\n( \*.*\n)+ \*\/\nexport type Addr = string;\n/g, "");
    content += "\nexport type Addr = string;\n";
  }

  await writeFile(`${name}.d.ts`, content);
}

const packages = [
  "@satlayer/bvs-pauser",
  "@satlayer/bvs-registry",
  "@satlayer/bvs-vault-router",
  "@satlayer/bvs-vault-cw20",
  "@satlayer/bvs-vault-bank",
];

for (const schema of packages) {
  const s = await import(schema + "/dist/schema.json", { with: { type: "json" } });
  await generate(s.default);
}
