// This file was automatically generated by json-schema-to-typescript.
// DO NOT MODIFY IT BY HAND.

export interface InstantiateMsg {
  /**
   * The denom supported by this vault.
   */
  denom: string;
  /**
   * The address of the `operator`. Each vault is delegated to an `operator`.
   */
  operator: string;
  /**
   * The address of the `pauser` contract. See [auth::set_pauser] for more information.
   */
  pauser: string;
  /**
   * The address of the `router` contract. See [auth::set_router] for more information.
   */
  router: string;
}

/**
 * Vault `ExecuteMsg`, to be implemented by the vault contract. Callable by any `sender`, redeemable by any `recipient`. The `sender` can be the same as the `recipient` in some cases.
 */
export type ExecuteMsg =
  | {
      deposit_for: RecipientAmount;
    }
  | {
      withdraw_to: RecipientAmount;
    };

/**
 * This struct is used to represent the recipient and amount fields together.
 */
export interface RecipientAmount {
  amount: Uint128;
  recipient: Addr;
}

export type QueryMsg =
  | {
      shares: {
        staker: string;
      };
    }
  | {
      assets: {
        staker: string;
      };
    }
  | {
      convert_to_assets: {
        shares: Uint128;
      };
    }
  | {
      convert_to_shares: {
        assets: Uint128;
      };
    }
  | {
      total_shares: {};
    }
  | {
      total_assets: {};
    }
  | {
      vault_info: {};
    };

/**
 * The response to the `Assets` query. Not exported. This is just a wrapper around `Uint128`, so that the schema can be generated.
 */
export type AssetsResponse = Uint128;

/**
 * The response to the `ConvertToAssets` query. Not exported. This is just a wrapper around `Uint128`, so that the schema can be generated.
 */
export type ConvertToAssetsResponse = Uint128;

/**
 * The response to the `ConvertToShares` query. Not exported. This is just a wrapper around `Uint128`, so that the schema can be generated.
 */
export type ConvertToSharesResponse = Uint128;

/**
 * The response to the `Shares` query. Not exported. This is just a wrapper around `Uint128`, so that the schema can be generated.
 */
export type SharesResponse = Uint128;

/**
 * The response to the `TotalAssets` query. Not exported. This is just a wrapper around `Uint128`, so that the schema can be generated.
 */
export type TotalAssetsResponse = Uint128;

/**
 * The response to the `TotalShares` query. Not exported. This is just a wrapper around `Uint128`, so that the schema can be generated.
 */
export type TotalSharesResponse = Uint128;

export interface VaultInfoResponse {
  /**
   * Asset identifier, using the CAIP-19 format.
   */
  asset_id: string;
  /**
   * The name of the vault contract, see [`cw2::set_contract_version`] for more information.
   */
  contract: string;
  /**
   * The `operator` that this vault is delegated to
   */
  operator: Addr;
  /**
   * The `pauser` contract address
   */
  pauser: Addr;
  /**
   * The `vault-router` contract address
   */
  router: Addr;
  /**
   * Whether the vault has enabled slashing
   */
  slashing: boolean;
  /**
   * The total assets under management
   */
  total_assets: Uint128;
  /**
   * The total shares in circulation
   */
  total_shares: Uint128;
  /**
   * The version of the vault contract, see [`cw2::set_contract_version`] for more information.
   */
  version: string;
}

export type Uint128 = string;

export type Addr = string;
